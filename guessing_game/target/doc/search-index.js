var searchIndex = new Map(JSON.parse('[\
["byteorder",{"doc":"This crate provides convenience methods for encoding and …","t":"IGKIGIINNNNNNNNNNNNNNNNMNNMNNNNNNMNNMNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNMNNMNNNMNNMNNNMNNMNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNMNNMNNNMNNMNNNMNNMNNMNNMNN","n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32_into","read_f32_into_unchecked","read_f64","read_f64_into","read_f64_into_unchecked","read_i128","read_i128_into","read_i16","read_i16_into","read_i24","read_i32","read_i32_into","read_i48","read_i64","read_i64_into","read_int","read_int128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32_into","write_f64","write_f64_into","write_i128","write_i128_into","write_i16","write_i16_into","write_i24","write_i32","write_i32_into","write_i48","write_i64","write_i64_into","write_i8_into","write_int","write_int128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128"],"q":[[0,"byteorder"],[156,"core::cmp"],[157,"core::fmt"],[158,"core::fmt"],[159,"core::option"],[160,"core::result"],[161,"core::any"]],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 16 bit integer from <code>buf</code>.","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","",""],"i":[0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,26,1,2,26,1,2,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,1,2,1,2,1,2,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,26,26,1,2,26,1,2,26,26,1,2,26,1,2,26,1,2,26,1,2,1,2,1,2,1,2,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,26,26,1,2,26,1,2,26,26,1,2,26,1,2,26,1,2,26,1,2],"f":"```````{ce{}{}}000{bb}{dd}{{bb}f}{{dd}f}{{}b}{{}d}{{bb}h}{{dd}h}{{bj}l}{{dj}l}{cc{}}0{{{A`{n}}}Ab}00{{{A`{Ad}}}Ab}00{{{A`{Af}}}Ab}{{{A`{Ah}}}Ab}{{{A`{Aj}}}Ab}{{{A`{Al}}}Ab}{{{A`{An}}}Ab}00{{{A`{B`}}}Ab}00{{{A`{Bb}}}Ab}00{{{A`{Bd}}}Ab}00{{bc}AbBf}{{dc}AbBf}{ce{}{}}0{{bb}{{Bh{f}}}}{{dd}{{Bh{f}}}}{{{A`{Bj}}}n}{{{A`{Bj}}{A`{n}}}Ab}0{{{A`{Bj}}}Ad}{{{A`{Bj}}{A`{Ad}}}Ab}0{{{A`{Bj}}}Af}{{{A`{Bj}}{A`{Af}}}Ab}{{{A`{Bj}}}Ah}{{{A`{Bj}}{A`{Ah}}}Ab}{{{A`{Bj}}}Aj}0{{{A`{Bj}}{A`{Aj}}}Ab}{{{A`{Bj}}}Al}0{{{A`{Bj}}{A`{Al}}}Ab}{{{A`{Bj}}Bl}Al}{{{A`{Bj}}Bl}Af}{{{A`{Bj}}}An}00{{{A`{Bj}}{A`{An}}}Ab}00{{{A`{Bj}}}B`}00{{{A`{Bj}}{A`{B`}}}Ab}00{{{A`{Bj}}}Bb}000{{{A`{Bj}}{A`{Bb}}}Ab}00{{{A`{Bj}}}Bd}000{{{A`{Bj}}{A`{Bd}}}Ab}00{{{A`{Bj}}Bl}Bd}00{{{A`{Bj}}Bl}An}00{c{{Bn{e}}}{}{}}000{cC`{}}0{{{A`{Bj}}n}Ab}{{{A`{n}}{A`{Bj}}}Ab}{{{A`{Bj}}Ad}Ab}{{{A`{Ad}}{A`{Bj}}}Ab}{{{A`{Bj}}Af}Ab}{{{A`{Af}}{A`{Bj}}}Ab}{{{A`{Bj}}Ah}Ab}{{{A`{Ah}}{A`{Bj}}}Ab}{{{A`{Bj}}Aj}Ab}0{{{A`{Aj}}{A`{Bj}}}Ab}{{{A`{Bj}}Al}Ab}0{{{A`{Al}}{A`{Bj}}}Ab}{{{A`{Cb}}{A`{Bj}}}Ab}{{{A`{Bj}}AlBl}Ab}{{{A`{Bj}}AfBl}Ab}{{{A`{Bj}}An}Ab}00{{{A`{An}}{A`{Bj}}}Ab}00{{{A`{Bj}}B`}Ab}00{{{A`{B`}}{A`{Bj}}}Ab}00{{{A`{Bj}}Bb}Ab}000{{{A`{Bb}}{A`{Bj}}}Ab}00{{{A`{Bj}}Bd}Ab}000{{{A`{Bd}}{A`{Bj}}}Ab}00{{{A`{Bj}}BdBl}Ab}00{{{A`{Bj}}AnBl}Ab}00","c":[53,56],"p":[[6,"BigEndian",0],[6,"LittleEndian",0],[6,"Ordering",156],[1,"bool"],[5,"Formatter",157],[8,"Result",157],[1,"f32"],[1,"slice"],[1,"unit"],[1,"f64"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"u128"],[1,"u16"],[1,"u32"],[1,"u64"],[10,"Hasher",158],[6,"Option",159],[1,"u8"],[1,"usize"],[6,"Result",160],[5,"TypeId",161],[1,"i8"],[10,"ByteOrder",0]],"b":[]}],\
["cfg_if",{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"Q","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":"`","c":[],"p":[],"b":[]}],\
["getrandom",{"doc":"Interface to the operating system’s random number …","t":"TTFTTTTTTTTTTTTTNNNNNNNNNNHHNNNNNNN","n":["CUSTOM_START","ERRNO_NOT_POSITIVE","Error","FAILED_RDRAND","INTERNAL_START","IOS_SEC_RANDOM","NODE_CRYPTO","NODE_ES_MODULE","NODE_RANDOM_FILL_SYNC","NO_RDRAND","UNEXPECTED","UNSUPPORTED","VXWORKS_RAND_SECURE","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","WINDOWS_RTL_GEN_RANDOM","borrow","borrow_mut","clone","clone_into","code","eq","fmt","fmt","from","from","getrandom","getrandom_uninit","into","raw_os_error","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"getrandom"],[35,"core::num::nonzero"],[36,"core::fmt"],[37,"core::fmt"],[38,"core::mem::maybe_uninit"],[39,"core::option"],[40,"alloc::string"],[41,"core::any"]],"d":["Codes at or above this point can be used by users to …","The platform-specific <code>errno</code> returned a non-positive value.","A small and <code>no_std</code> compatible error type","RDRAND instruction failed due to a hardware issue.","Codes below this point represent OS Errors (i.e. positive …","Call to <code>CCRandomGenerateBytes</code> failed on iOS, tvOS, or …","Node.js does not have the <code>crypto</code> CommonJS module.","Called from an ES module on Node.js. This is unsupported, …","Calling Node.js function <code>crypto.randomFillSync</code> failed.","RDRAND instruction unsupported on this target.","Encountered an unexpected situation which should not …","This target/platform is not supported by <code>getrandom</code>.","On VxWorks, call to <code>randSecure</code> failed (random number …","The environment does not support the Web Crypto API.","Calling Web Crypto API <code>crypto.getRandomValues</code> failed.","Call to Windows <code>RtlGenRandom</code> failed.","","","","","Extract the bare error code.","","","","","Returns the argument unchanged.","Fill <code>dest</code> with random bytes from the system’s preferred …","Version of the <code>getrandom</code> function which fills <code>dest</code> with …","Calls <code>U::from(self)</code>.","Extract the raw OS error code (if this error came from the …","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1],"f":"````````````````{ce{}{}}0{bb}{{ce}d{}{}}{bf}{{bb}h}{{bj}l}0{fb}{cc{}}{{{A`{n}}}{{Ab{db}}}}{{{A`{{Ad{n}}}}}{{Ab{{A`{n}}b}}}}9{b{{Ah{Af}}}}:{cAj{}}{c{{Ab{e}}}{}{}}0{cAl{}}","c":[],"p":[[5,"Error",0],[1,"unit"],[8,"NonZeroU32",35],[1,"bool"],[5,"Formatter",36],[8,"Result",36],[1,"u8"],[1,"slice"],[6,"Result",37],[20,"MaybeUninit",38],[1,"i32"],[6,"Option",39],[5,"String",40],[5,"TypeId",41]],"b":[[22,"impl-Debug-for-Error"],[23,"impl-Display-for-Error"]]}],\
["guessing_game",{"doc":"","t":"H","n":["main"],"q":[[0,"guessing_game"]],"d":[""],"i":[0],"f":"{{}b}","c":[],"p":[[1,"unit"]],"b":[]}],\
["ppv_lite86",{"doc":"","t":"KKKKKKKKKKRKKKKKKKKKKKKKMMQQQMMMMMMNNNNMMMMMMMMMMMMMMMMMMMMMMMMMKRKRKRKRKRKRKRKRKRKRMNNMMMNNEEEMMMCIIFFFFFFIIIFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNUUUNNNNNNNNNNNNNNN","n":["AndNot","ArithOps","BSwap","BitOps0","BitOps128","BitOps32","BitOps64","LaneWords4","Machine","MultiLane","Output","RotateEachWord128","RotateEachWord32","RotateEachWord64","Store","StoreBytes","Swap64","UnsafeFrom","VZip","Vec2","Vec4","Vec4Ext","Vector","Words4","andnot","bswap","dispatch","dispatch_light128","dispatch_light256","extract","extract","from_lanes","insert","insert","instance","read_be","read_be","read_le","read_le","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right8","shuffle1230","shuffle2301","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","swap1","swap16","swap2","swap32","swap4","swap64","swap8","to_lanes","to_scalars","transpose4","u128x1","u128x1","u128x2","u128x2","u128x4","u128x4","u32x4","u32x4","u32x4x2","u32x4x2","u32x4x4","u32x4x4","u64x2","u64x2","u64x2x2","u64x2x2","u64x2x4","u64x2x4","u64x4","u64x4","unpack","unpack","unpack","unsafe_from","unsafe_read_be","unsafe_read_le","vec","vec","vec128_storage","vec256_storage","vec512_storage","vzip","write_be","write_le","x86_64","AVX","AVX2","Avx2Machine","NoA1","NoA2","NoNI","NoS3","NoS4","SSE2","SSE41","SSSE3","SseMachine","YesA1","YesA2","YesNI","YesS3","YesS4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","instance","instance","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new128","new128","split128","split128","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpack","vec128_storage","vec256_storage","vec512_storage","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"ppv_lite86"],[99,"ppv_lite86::x86_64"],[269,"core::clone"],[270,"core::marker"],[271,"core::result"],[272,"core::any"]],"d":["","Ops that depend on word size","","Ops that are independent of word size and endian","","","","A vector composed one or more lanes each composed of four …","","A vector composed of multiple 128-bit lanes.","","","","","","","Exchange neigboring ranges of bits of the specified size","","Combine single vectors into a multi-lane vector.","A vector composed of two elements, which may be words or …","A vector composed of four elements, which may be words or …","Vec4 functions which may not be implemented yet for all …","","A vector composed of four words; depending on their size, …","","","Generate the full set of optimized implementations to take …","Generate only the basic implementations necessary to be …","Generate only the basic implementations necessary to be …","","","Build a multi-lane vector from individual lanes.","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","Split a multi-lane vector into single-lane vectors.","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","Safety","Safety","","","","","","","","","","AVX but not AVX2: only 128-bit integer operations, but use …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generic wrapper for unparameterized storage of any of the …","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,0,4,6,7,4,6,18,18,18,18,18,32,32,32,32,32,32,33,32,32,34,34,34,35,35,35,36,36,36,36,36,36,36,7,37,38,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,40,18,18,41,31,31,18,18,0,0,0,42,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,57,58,59,57,58,59,44,45,46,47,48,49,50,51,52,53,54,56,57,57,58,58,59,54,56,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,58,59,58,59,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,57,0,0,0,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59],"f":"````````````````````````{{{d{}{{b{c}}}}{d{}{{b{c}}}}}c{}}{ff}```{{hj}c{}}{{lj}c{}}{cn{}}{{hcj}h{}}{{lcj}l{}}{{}{{Bd{}{{A`{c}}{Ab{e}}{Ad{g}}{Af{i}}{Ah{k}}{Aj{m}}{Al{o}}{An{Aa}}{B`{Ac}}{Bb{Ae}}}}}BfBhBjBlBnC`CbCdCfCh}{{{Bd{}{{A`{c}}{Ab{e}}{Ad{g}}{Af{i}}{Ah{k}}{Aj{m}}{Al{o}}{An{Aa}}{B`{Ac}}{Bb{Ae}}}}{Cl{Cj}}}AgBfBhBjBlBnC`CbCdCfChCn}000{D`D`}00000{DbDb}11{DdDd}00{DfDf}00{DhDh}000000{nc{}}{Djc{}}{{DlDlDlDl}{{Dn{DlDlDlDl}}}}````````````````````{cE`{}}{{{Bd{}{{A`{c}}{Ab{e}}{Ad{g}}{Af{i}}{Ah{k}}{Aj{m}}{Al{o}}{An{Aa}}{B`{Ac}}{Bb{Ae}}}}Ag}AiBfBhBjBlBnC`CbCdCfCh{}{{E`{Ag}}}}0{cEb{}}{{{Cl{Cj}}}Cn}0{{{Bd{}{{A`{c}}{Ab{e}}{Ad{g}}{Af{i}}{Ah{k}}{Aj{m}}{Al{o}}{An{Aa}}{B`{Ac}}{Bb{Ae}}}}Ag}AiBfBhBjBlBnC`CbCdCfCh{}{{n{Ag}}}}0```{Edc{}}{{Cn{Cl{Cj}}}Ef}0``````````````````{ce{}{}}00000000000000000000000000000{EhEh}{EjEj}{ElEl}{EnEn}{F`F`}{FbFb}{FdFd}{FfFf}{FhFh}{FjFj}{{{Fl{ceg}}}{{Fl{ceg}}}FnFnFn}{{{G`{c}}}{{G`{c}}}Fn}{GbGb}{GdGd}{GfGf}{{}Gb}{{}Gd}{{}Gf}{{GbGb}Gh}{{GdGd}Gh}{{GfGf}Gh}{cc{}}00000000000{{{Gj{j}}}Gb}11{{{Gj{Gl}}}Gd}2{{}{{Fl{ceg}}}GnGnGn}{{}{{G`{c}}}Gn}{ce{}{}}00000000000000{{{Gj{Gb}}}Gd}{{{Gj{Gb}}}Gf}{Gd{{Gj{Gb}}}}{Gf{{Gj{Gb}}}}{c{{H`{e}}}{}{}}00000000000000000000000000000{cHb{}}00000000000000{GbGb}```777777777777777","c":[],"p":[[17,"Output"],[10,"AndNot",0],[10,"BSwap",0],[10,"Vec2",0],[1,"u32"],[10,"Vec4",0],[10,"MultiLane",0],[17,"u32x4"],[17,"u64x2"],[17,"u128x1"],[17,"u32x4x2"],[17,"u64x2x2"],[17,"u64x4"],[17,"u128x2"],[17,"u32x4x4"],[17,"u64x2x4"],[17,"u128x4"],[10,"Machine",0],[10,"u32x4",0],[10,"u64x2",0],[10,"u128x1",0],[10,"u32x4x2",0],[10,"u64x2x2",0],[10,"u64x4",0],[10,"u128x2",0],[10,"u32x4x4",0],[10,"u64x2x4",0],[10,"u128x4",0],[1,"u8"],[1,"slice"],[10,"StoreBytes",0],[10,"RotateEachWord32",0],[10,"RotateEachWord64",0],[10,"Words4",0],[10,"LaneWords4",0],[10,"Swap64",0],[10,"Vector",0],[10,"Vec4Ext",0],[1,"tuple"],[10,"Store",0],[10,"UnsafeFrom",0],[10,"VZip",0],[1,"unit"],[5,"YesS3",99],[5,"NoS3",99],[5,"YesS4",99],[5,"NoS4",99],[5,"YesA1",99],[5,"NoA1",99],[5,"YesA2",99],[5,"NoA2",99],[5,"YesNI",99],[5,"NoNI",99],[5,"SseMachine",99],[10,"Clone",269],[5,"Avx2Machine",99],[20,"vec128_storage",99],[20,"vec256_storage",99],[20,"vec512_storage",99],[1,"bool"],[1,"array"],[1,"u64"],[10,"Copy",270],[6,"Result",271],[5,"TypeId",272]],"b":[]}],\
["proc_macro2",{"doc":"github crates-io docs-rs","t":"PPPGFPFPPFFPPPFPGFFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNFENNNNNNNNNNNNNN","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_character","byte_string","c_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[230,"proc_macro2::extra"],[245,"proc_macro2::token_stream"],[261,"core::ffi::c_str"],[262,"core::cmp"],[263,"core::marker"],[264,"core::convert"],[265,"core::iter::traits::collect"],[266,"core::fmt"],[267,"core::fmt"],[268,"proc_macro"],[269,"core::hash"],[270,"core::option"],[271,"alloc::string"],[272,"core::ops::range"],[273,"core::any"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>∅ ... ∅</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte character literal.","Byte string literal.","C string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[12,11,11,0,0,9,0,9,12,0,0,9,11,11,0,9,0,0,0,0,1,25,8,7,9,10,11,1,12,13,4,25,8,7,9,10,11,1,12,13,4,4,4,4,7,4,8,7,9,10,11,1,12,13,4,8,7,9,10,11,1,12,13,4,13,8,10,10,11,12,13,13,8,8,0,4,4,4,4,25,25,8,8,7,9,9,10,10,11,1,1,12,13,13,4,4,25,8,8,8,7,7,9,9,9,9,9,10,11,1,12,13,4,8,8,8,4,13,4,4,4,4,4,4,4,4,4,4,25,8,7,9,10,11,1,12,13,4,8,8,4,4,7,7,7,8,10,1,13,13,13,7,9,10,1,13,4,7,1,25,9,10,1,13,4,10,10,10,4,4,8,7,9,10,11,1,12,13,4,25,8,9,10,1,13,4,0,25,8,7,9,10,11,1,12,13,4,25,8,7,9,10,11,1,12,13,4,25,8,7,9,10,11,1,12,13,4,4,4,4,4,4,4,4,4,4,4,7,4,4,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37],"f":"````````````````````{bd}{ce{}{}}0000000000000000000{fh}{{{j{f}}}h}{lh}{{}n}{dh}{A`A`}{nn}{AbAb}{AdAd}{AfAf}{bb}{AhAh}{AjAj}{hh}{{ce}Al{}{}}00000000{{AjAj}An}{{}A`}{AdB`}{AdAf}{{AfAf}Bb}{{AhAh}Bb}{{Ajc}Bb{Bd{Bh{Bf}}}}{{AjAj}Bb}{{A`c}Al{{Bl{}{{Bj{Ab}}}}}}{{A`c}Al{{Bl{}{{Bj{A`}}}}}}`{Bnh}0{C`h}0{{CbCd}Cf}0{{A`Cd}Cf}0{{nCd}Cf}{{AbCd}Cf}0{{AdCd}Cf}0{{AfCd}Cf}{{bCd}Cf}0{{AhCd}Cf}{{AjCd}Cf}0{{hCd}Cf}0{cc{}}{AbA`}{ChA`}22{Cjn}{hAb}{AjAb}{AdAb}{bAb}7777777{cA`{{Bl{}{{Bj{A`}}}}}}{cA`{{Bl{}{{Bj{Ab}}}}}}{Bf{{Cl{A`Cb}}}}{Bf{{Cl{hCb}}}}{{Ajc}AlCn}{D`h}0{Dbh}0{Ddh}0{Dfh}0{Dhh}0{ce{}{}}000000000{A`Dj}{A`Bb}{Dlh}0{{nn}{{Dn{n}}}}{{nn}n}{{}n}{{}A`}{{AfA`}Ad}{{dAh}b}{{Bfn}Aj}0{{AjAj}{{Dn{An}}}}6{{Abn}Al}{{Adn}Al}{{bn}Al}{{Ajn}Al}{{hn}Al}{n{{Dn{E`}}}}{bAh}{Cbn}{Abn}{Adn}{bn}{Ajn}{hn}33{AdA`}{Bfh}{{hc}{{Dn{n}}}{{Ed{Eb}}}}{ce{}{}}00000000{cE`{}}000000`{c{{Cl{e}}}{}{}}0000000000000000000{cEf{}}000000000{Ehh}0{Ejh}0{Elh}0{Enh}0{fh}0{nCj}{Ebh}0`::{B`B`}{{ce}Al{}{}}{B`n}{{B`Cd}Cf}{cc{}}?22?==<``??{DjDj}4{{DjCd}Cf}2{ce{}{}}0{Dj{{Dn{Ab}}}}{Dj{{F`{Eb{Dn{Eb}}}}}}2{c{{Cl{e}}}{}{}}0{cEf{}}","c":[],"p":[[5,"Punct",0],[1,"char"],[1,"u8"],[5,"Literal",0],[1,"slice"],[5,"CStr",261],[5,"Span",0],[5,"TokenStream",0],[6,"TokenTree",0],[5,"Group",0],[6,"Delimiter",0],[6,"Spacing",0],[5,"Ident",0],[1,"unit"],[6,"Ordering",262],[5,"DelimSpan",230],[1,"bool"],[10,"Sized",263],[1,"str"],[10,"AsRef",264],[17,"Item"],[10,"IntoIterator",265],[1,"f32"],[1,"f64"],[5,"LexError",0],[5,"Formatter",266],[8,"Result",266],[5,"TokenStream",267],[5,"Span",267],[6,"Result",268],[10,"Hasher",269],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[5,"IntoIter",245],[1,"isize"],[6,"Option",270],[5,"String",271],[1,"usize"],[10,"RangeBounds",272],[5,"TypeId",273],[1,"u128"],[1,"u16"],[1,"u32"],[1,"u64"],[1,"tuple"]],"b":[[70,"impl-PartialEq%3CT%3E-for-Ident"],[71,"impl-PartialEq-for-Ident"],[72,"impl-Extend%3CTokenTree%3E-for-TokenStream"],[73,"impl-Extend%3CTokenStream%3E-for-TokenStream"],[79,"impl-Display-for-LexError"],[80,"impl-Debug-for-LexError"],[81,"impl-Display-for-TokenStream"],[82,"impl-Debug-for-TokenStream"],[84,"impl-Display-for-TokenTree"],[85,"impl-Debug-for-TokenTree"],[86,"impl-Display-for-Group"],[87,"impl-Debug-for-Group"],[89,"impl-Debug-for-Punct"],[90,"impl-Display-for-Punct"],[92,"impl-Display-for-Ident"],[93,"impl-Debug-for-Ident"],[94,"impl-Display-for-Literal"],[95,"impl-Debug-for-Literal"],[97,"impl-From%3CTokenTree%3E-for-TokenStream"],[98,"impl-From%3CTokenStream%3E-for-TokenStream"],[102,"impl-From%3CLiteral%3E-for-TokenTree"],[103,"impl-From%3CIdent%3E-for-TokenTree"],[104,"impl-From%3CGroup%3E-for-TokenTree"],[105,"impl-From%3CPunct%3E-for-TokenTree"],[113,"impl-FromIterator%3CTokenStream%3E-for-TokenStream"],[114,"impl-FromIterator%3CTokenTree%3E-for-TokenStream"]]}],\
["quote",{"doc":"github crates-io docs-rs","t":"KKKMMMMMQNNQQNNNNM","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"],[18,"proc_macro2"],[19,"core::convert"],[20,"core::iter::traits::collect"],[21,"core::fmt"],[22,"core::fmt"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,1,1,1,1,7,0,6,6,0,0,7,7,6,6,6],"f":"```{{bc}d{{h{f}}}}{{bc}dj}{{bce}djl}0{{nA`}Ab}`{lAd}0``{n{{Ah{Af}}}}011{{lAd}d}","c":[],"p":[[10,"TokenStreamExt",0],[1,"unit"],[6,"TokenTree",18],[10,"Into",19],[10,"IntoIterator",20],[10,"ToTokens",0],[10,"IdentFragment",0],[5,"Formatter",21],[8,"Result",21],[5,"TokenStream",18],[5,"Span",18],[6,"Option",22]],"b":[]}],\
["rand",{"doc":"Utilities for random number generation","t":"TKFKTKKRKNNNCNNMNNNNNNNMNNNNNNNNNNNMMCHNNCNNNNNCNNHNMNNMNNNNPFFGFFKKPPPFFFFPFGFMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNCKKKRFFFFFKRMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEECKFNNNNNNNNNNEEEEEEEEEEEFFFCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNRKFKNNMNMNNMMNMMNNCNNNNMMNNNNNGGGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNN","n":["CUSTOM_START","CryptoRng","Error","Fill","INTERNAL_START","Rng","RngCore","Seed","SeedableRng","borrow","borrow_mut","code","distributions","fill","fill","fill_bytes","fmt","fmt","from","from","from","from_entropy","from_rng","from_seed","gen","gen","gen_bool","gen_bool","gen_range","gen_range","gen_ratio","gen_ratio","inner","into","new","next_u32","next_u64","prelude","random","raw_os_error","read","rngs","sample","sample","sample_iter","sample_iter","seed_from_u64","seq","source","take_inner","thread_rng","to_string","try_fill","try_fill","try_fill","try_fill_bytes","try_from","try_into","type_id","vzip","AllWeightsZero","Alphanumeric","Bernoulli","BernoulliError","DistIter","DistMap","DistString","Distribution","InvalidProbability","InvalidWeight","NoItem","Open01","OpenClosed01","Slice","Standard","TooMany","Uniform","WeightedError","WeightedIndex","append_string","append_string","append_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ratio","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","map","map","new","new","new","next","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","sample_iter","sample_string","sample_string","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","update_weights","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weighted","SampleBorrow","SampleRange","SampleUniform","Sampler","Uniform","UniformChar","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_empty","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","WeightedError","WeightedIndex","alias_method","Weight","WeightedIndex","borrow","borrow_mut","fmt","from","into","new","try_from","try_into","type_id","vzip","CryptoRng","Distribution","IteratorRandom","Rng","RngCore","SeedableRng","SliceRandom","StdRng","ThreadRng","random","thread_rng","OsRng","StdRng","ThreadRng","adapter","as_rngcore","as_rngcore","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from_rng","from_seed","into","into","into","mock","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ReadError","ReadRng","ReseedingRng","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reseed","source","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","StepRng","borrow","borrow_mut","clone","clone_into","eq","fill_bytes","fmt","from","into","new","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id","vzip","Item","IteratorRandom","SliceChooseIter","SliceRandom","borrow","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","fmt","from","index","into","into_iter","len","next","partial_shuffle","shuffle","size_hint","try_from","try_into","type_id","vzip","IndexVec","IndexVecIntoIter","IndexVecIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","index","into","into","into","into_iter","into_iter","into_iter","into_vec","is_empty","iter","len","next","next","sample","sample_weighted","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"rand"],[60,"rand::distributions"],[328,"rand::distributions::uniform"],[473,"rand::distributions::weighted"],[476,"rand::distributions::weighted::alias_method"],[488,"rand::prelude"],[499,"rand::rngs"],[560,"rand::rngs::adapter"],[608,"rand::rngs::mock"],[627,"rand::seq"],[657,"rand::seq::index"],[710,"core::num::nonzero"],[711,"core::option"],[712,"core::marker"],[713,"core::fmt"],[714,"core::fmt"],[715,"getrandom::error"],[716,"core::default"],[717,"core::convert"],[718,"core::error"],[719,"alloc::boxed"],[720,"core::convert"],[721,"alloc::string"],[722,"core::any"],[723,"core::clone"],[724,"core::cmp"],[725,"core::cmp"],[726,"core::ops::range"],[727,"core::iter::traits::collect"],[728,"core::ops::arith"],[729,"core::num::wrapping"],[730,"core::num::nonzero"],[731,"alloc::vec"],[732,"rand_core::block"],[733,"std::io"],[734,"core::ops::index"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Types which may be filled with random data","Codes below this point represent OS Errors (i.e. positive …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","","","Retrieve the error code, if any.","Generating random samples from probability distributions","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","","","","","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Return a bool with a probability of <code>numerator/denominator</code> …","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Convenience re-export of common members","Generates a random value using the thread-local random …","Extract the raw OS error code (if this error came from the …","","Random number generators and adapters","Sample a new value, using the given distribution.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Sequence-related functionality","","Unwrap the inner error (<code>std</code> only)","Retrieve the lazily-initialized thread-local random number …","","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","","All items in the provided weight collection are zero.","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","An iterator that generates random values of <code>T</code> with …","A distribution of values of type <code>S</code> derived from the …","<code>String</code> sampler","Types (distributions) that can be used to create a random …","<code>p &lt; 0</code> or <code>p &gt; 1</code>.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","A distribution to sample items uniformly from a slice.","A generic random value distribution, implemented for many …","Too many weights are provided (length greater than <code>u32::MAX</code>…","Sample values uniformly between two bounds.","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","Append <code>len</code> random chars to <code>string</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Construct a new <code>Bernoulli</code> with the probability of success …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a distribution of values of ‘S’ by mapping the …","Create a distribution of values of ‘S’ by mapping the …","Construct a new <code>Bernoulli</code> with the given probability of …","Create a new <code>Slice</code> instance which samples uniformly from …","Creates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates random values of <code>T</code>, …","Generate a <code>String</code> of <code>len</code> random chars","Generate a <code>String</code> of <code>len</code> random chars","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A distribution uniformly sampling numbers within a given …","Update a subset of weights, without changing the number of …","","","","","","","","","","","","","Weighted index sampling","Helper trait similar to <code>Borrow</code> but implemented only for …","Range that supports generating a single sample efficiently.","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing <code>UniformSampler</code> for <code>char</code>.","The back-end implementing <code>UniformSampler</code> for <code>Duration</code>.","The back-end implementing <code>UniformSampler</code> for …","The back-end implementing <code>UniformSampler</code> for integer types.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check whether the range is empty.","Construct self, with inclusive lower bound and exclusive …","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Sample a value.","","","","","","","","","","","","","","","","","Generate a sample from the given range.","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A random number generator that retrieves randomness from …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","Wrappers / adapters forming RNGs","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Mock random number generator","","","","","","","","","","","","","","","","","","","","","","","","","<code>ReadRng</code> error type","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","","","","","Reseed the internal PRNG.","","","","","","","","","","","","","","","","","","A simple implementation of <code>RngCore</code> for testing purposes.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a <code>StepRng</code>, yielding an arithmetic sequence starting …","","","","","","","","","The element type.","Extension trait on iterators, providing random sampling …","An iterator over multiple slice elements.","Extension trait on slices, providing random mutation and …","","","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","","Returns the argument unchanged.","Low-level API for sampling indices","Calls <code>U::from(self)</code>.","","","","Shuffle a slice in place, but exit early.","Shuffle a mutable slice in place.","","","","","","A vector of indices.","Return type of <code>IndexVec::into_iter</code>.","Return type of <code>IndexVec::iter</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Return the value at the given <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into an iterator over the indices as a sequence of …","","","Return result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …","Returns <code>true</code> if the length is 0.","Iterate over the indices as a sequence of <code>usize</code> values","Returns the number of indices","","","Randomly sample exactly <code>amount</code> distinct indices from …","Randomly sample exactly <code>amount</code> distinct indices from …","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,1,0,0,17,0,1,1,1,0,5,5,9,1,1,1,1,1,17,17,17,5,5,5,5,5,5,5,5,1,1,1,9,9,0,0,1,9,0,5,5,5,5,17,0,1,1,0,1,7,5,5,9,1,1,1,1,47,0,0,0,0,0,0,0,40,47,47,0,0,0,0,47,0,0,0,36,37,38,39,40,32,52,41,42,37,43,45,47,48,38,39,40,32,52,41,42,37,43,45,47,48,38,39,40,41,42,37,43,45,47,48,38,39,40,41,42,37,43,45,47,48,38,39,40,45,47,48,39,40,40,32,52,41,42,37,43,45,47,47,48,38,39,40,32,52,41,42,37,43,45,47,48,48,48,38,39,39,40,32,52,41,42,37,43,45,47,48,38,32,31,31,39,43,45,32,31,39,52,41,41,42,42,37,43,45,48,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,31,31,36,36,32,39,40,41,42,37,43,45,47,48,38,40,47,39,40,32,52,41,42,37,43,45,47,48,38,39,40,32,52,41,42,37,43,45,47,48,38,39,40,32,52,41,42,37,43,45,47,48,38,0,45,39,40,32,52,41,42,37,43,45,47,48,38,0,0,0,0,22,0,0,0,0,0,0,83,77,78,79,80,81,78,79,80,81,78,79,80,81,78,79,80,81,78,80,78,79,80,81,78,79,80,81,78,79,80,81,23,83,48,78,78,78,78,78,78,78,78,78,78,78,78,79,80,80,81,83,48,78,78,78,78,78,78,78,78,78,78,78,78,79,80,80,81,83,78,78,78,78,78,78,78,78,78,78,78,78,79,80,80,81,23,83,78,78,78,78,78,78,78,78,78,78,78,78,80,80,83,78,78,78,78,78,78,78,78,78,78,78,78,78,79,80,81,78,79,80,81,78,79,80,81,78,79,80,81,78,79,80,81,0,0,0,0,0,85,85,85,85,85,85,85,85,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,89,33,88,89,33,88,89,33,88,89,33,88,89,33,88,33,89,88,89,33,88,89,33,88,89,33,89,89,88,89,33,0,88,89,33,88,89,33,88,89,33,88,89,33,88,89,33,88,89,33,88,89,33,88,89,33,0,0,0,90,92,95,90,92,95,90,90,90,92,90,92,95,95,90,92,95,90,92,95,90,92,90,92,90,92,90,90,95,90,95,92,90,92,95,90,92,95,90,92,95,90,92,95,90,0,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,97,0,0,0,99,99,97,98,97,98,98,97,97,98,97,97,99,99,0,99,99,99,99,97,97,99,99,99,99,99,0,0,0,101,103,102,101,103,102,101,102,101,102,101,101,103,102,101,101,101,103,102,101,101,103,102,101,103,102,101,101,101,101,103,102,0,0,103,102,101,102,101,103,102,101,103,102,101,103,102,101,103,102],"f":"`````````{ce{}{}}0{b{{h{{f{d}}}}}}`{{jc}l{nA`}}0{{Ab{Af{Ad}}}l}{{bAh}{{Al{lAj}}}}0{{{f{d}}}b}{Anb}{cc{}}{{}{{Bb{}{{B`{c}}}}}{A`Bd{Bf{{Af{Ad}}}}}}{c{{Al{{Bb{}{{B`{e}}}}b}}}Ab{A`Bd{Bf{{Af{Ad}}}}}}{c{{Bb{}{{B`{c}}}}}{A`Bd{Bf{{Af{Ad}}}}}}{jc{}}0{{jBh}Bj}0{{je}cBl{{Bn{c}}}}0{{jdd}Bj}0{bC`}?{cb{{Cd{{Cb{C`}}}}}}{Abd}{AbCf}`{{}c{}}{b{{h{Ch}}}}{{Ab{Af{Ad}}}{{Al{CjCl}}}}`{{je}c{}{{Cn{c}}}}0{{je}{{D`{ejc}}}{}{{Cn{c}}}}0{Cf{{Bb{}{{B`{c}}}}}{A`Bd{Bf{{Af{Ad}}}}}}`{b{{h{C`}}}}{b{{Cb{C`}}}}{{}Db}{cDd{}}{{nc}{{Al{lb}}}{jA`}}{{jc}{{Al{lb}}}{nA`}}0{{Ab{Af{Ad}}}{{Al{lb}}}}{c{{Al{e}}}{}{}}0{cDf{}}{ce{}{}}```````````````````{{DhcDdCj}l{jA`}}{{DjcDdCj}l{jA`}}{{DlcDdCj}l{jA`}}333333333333333333333333{DnDn}{E`E`}{EbEb}{EdEd}{DjDj}{{{Ef{c}}}{{Ef{c}}}Eh}{{{Ej{c}}}{{Ej{c}}}{EhBlEl}}{EnEn}{{{F`{c}}}{{F`{c}}}{EhBl}}{DlDl}{{ce}l{}{}}000000000{{DnDn}Bj}{{E`E`}Bj}{{{Ej{c}}{Ej{c}}}Bj{FbBlEl}}{{EnEn}Bj}{{{F`{c}}{F`{c}}}Bj{FbBl}}{{DnAh}Fd}{{E`Ah}Fd}0{{{D`{ceg}}Ah}FdFfFfFf}{{{Fh{cegi}}Ah}FdFfFfFfFf}{{EbAh}Fd}{{EdAh}Fd}{{DjAh}Fd}{{{Ef{c}}Ah}FdFf}{{{Ej{c}}Ah}Fd{FfBlEl}}{{EnAh}Fd}0{{{F`{c}}Ah}Fd{FfBl}}{{DlAh}Fd}{cc{}}000000000{{{Fj{c}}}{{F`{c}}}Bl}{{{Fl{c}}}{{F`{c}}}Bl}22{{dd}{{Al{DnE`}}}}{ce{}{}}000000000000{{Cng}{{Fh{Cngce}}}{}{}{{G`{c}{{Fn{e}}}}}}0{Bh{{Al{DnE`}}}}{{{Af{c}}}{{Al{{Ef{c}}`}}}{}}{c{{Al{{Ej{e}}En}}}Gb{GdEhBdBlEl}}{{{D`{egc}}}{{h{c}}}{}{{Cn{c}}}j}{{Cnc}e{jA`}{}}{{Dnc}Bj{jA`}}{{{Fh{eicg}}k}g{}{{Cn{c}}}{}{{G`{c}{{Fn{g}}}}}{jA`}}{{Ebc}Bh{jA`}}{{Ebc}Gf{jA`}}{{Edc}Gf{jA`}}{{Edc}Bh{jA`}}{{Djc}Ad{jA`}}{{{Ef{c}}e}c{}{jA`}}{{{Ej{c}}e}Cj{BlEl}{jA`}}{{{F`{c}}e}cBl{jA`}}{{Dlc}Gh{jA`}}{{Dlc}{{Gj{e}}}{jA`}{}}{{Dlc}{{Gl{egi}}}{jA`}{}{}{}}{{Dlc}Gn{jA`}}{{Dlc}H`{jA`}}{{Dlc}{{Gl{e}}}{jA`}{}}{{Dlc}{{Hb{e}}}{jA`}{}}0{{Dlc}Hd{jA`}}{{Dlc}Bh{jA`}}{{Dlc}{{Gl{egikmoAaAcAeAgAi}}}{jA`}{}{}{}{}{}{}{}{}{}{}{}}{{Dlc}{{Gl{egikmoAaAc}}}{jA`}{}{}{}{}{}{}{}{}}444{{Dlc}Hf{jA`}}5555{{Dlc}Hh{jA`}}6{{Dlc}Hj{jA`}}7{{Dlc}{{Gl{egikmoAaAcAe}}}{jA`}{}{}{}{}{}{}{}{}{}}{{Dlc}Ad{jA`}}{{Dlc}Hl{jA`}}:{{Dlc}Cf{jA`}}{{Dlc}Hn{jA`}}<<<<{{Dlc}I`{jA`}}{{Dlc}l{jA`}}>>>>{{Dlc}{{Gl{egikmo}}}{jA`}{}{}{}{}{}{}}{{Dlc}Ib{jA`}}{{Dlc}{{Hb{e}}}{jA`}{}}00{{Dlc}Id{jA`}}111{{Dlc}Gf{jA`}}{{Dlc}d{jA`}}3{{Dlc}{{Gl{egikm}}}{jA`}{}{}{}{}{}}{{Dlc}Ch{jA`}}{{Dlc}Bj{jA`}}{{Dlc}{{h{e}}}{jA`}{}}77{{Dlc}{{Gl{egikmoAaAcAeAgAiAk}}}{jA`}{}{}{}{}{}{}{}{}{}{}{}{}}{{Dlc}{{Gl{egik}}}{jA`}{}{}{}{}}{{Dlc}If{jA`}}{{Dlc}Ih{jA`}};{{Dlc}{{Gl{eg}}}{jA`}{}{}}{{Dlc}Cj{jA`}}{{Dlc}{{Gl{egikmoAaAcAeAg}}}{jA`}{}{}{}{}{}{}{}{}{}{}}>>>{{Dlc}{{Gl{egikmoAa}}}{jA`}{}{}{}{}{}{}{}}{{Cnc}{{D`{Cnce}}}j{}}0{{DhcCj}Dd{jA`}}0{{{D`{egc}}}{{Gl{Cj{h{Cj}}}}}{}{{Cn{c}}}j}{ce{}{}}000000000{cDd{}}0{c{{Al{e}}}{}{}}00000000000000000000000{cDf{}}00000000000`{{{Ej{c}}{Af{{Gl{Cjc}}}}}{{Al{lEn}}}{}}444444444444````````````{Ijc{}}55555555{{{Il{c}}}{{Il{c}}}Eh}{InIn}{{{J`{c}}}{{J`{c}}}Eh}{JbJb}{{ce}l{}{}}000{{{Il{c}}{Il{c}}}BjFb}{{{J`{c}}{J`{c}}}BjFb}{{{Il{c}}Ah}FdFf}{{InAh}Fd}{{{J`{c}}Ah}FdFf}{{JbAh}Fd}{cc{}}000{ce{}{}}000{BnBj}{{eg}{{Jf{}{{Jd{c}}}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{F`{c}}}Bl{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Il{Hn}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Il{H`}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Il{Ch}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Il{I`}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Il{Cf}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Il{Ad}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Il{Gh}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Il{Cj}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Il{Ih}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Il{d}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Il{Ib}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Il{Hf}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}In{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{J`{Gf}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{J`{Bh}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}Jb{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Jf{}{{Jd{c}}}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{F`{c}}}Bl{{Ij{c}}A`}{{Ij{c}}A`}};6{{eg}{{Il{Hn}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Il{Ch}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Il{H`}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}:{{eg}{{Il{Cf}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}{{eg}{{Il{Ad}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}?{{eg}{{Il{I`}}}{}{{Ij{c}}A`}{{Ij{c}}A`}}>?;:98{{{Jf{}{{Jd{c}}}}e}c{}{jA`}}{{{Il{Hn}}c}e{jA`}{}}{{{Il{Gh}}c}e{jA`}{}}{{{Il{d}}c}e{jA`}{}}{{{Il{Ih}}c}e{jA`}{}}{{{Il{Ch}}c}e{jA`}{}}{{{Il{Ib}}c}e{jA`}{}}{{{Il{Ad}}c}e{jA`}{}}{{{Il{Cj}}c}e{jA`}{}}{{{Il{I`}}c}e{jA`}{}}{{{Il{Hf}}c}e{jA`}{}}{{{Il{H`}}c}e{jA`}{}}{{{Il{Cf}}c}e{jA`}{}}{{Inc}e{jA`}{}}{{{J`{Bh}}c}e{jA`}{}}{{{J`{Gf}}c}e{jA`}{}}{{Jbc}Jh{jA`}}{{Bnc}e{AbA`}{}}{{egi}c{}{{Ij{c}}A`}{{Ij{c}}A`}{jA`}}000000000000000000000000000{ce{}{}}000{c{{Al{e}}}{}{}}0000000{cDf{}}0002222`````22{{{Jj{c}}Ah}Fd{FfJl}}{cc{}}4{{{Jn{c}}}{{Al{{Jj{c}}En}}}Jl}4435```````````````{cAb{}}00666666{K`K`}{KbKb}{DbDb}{{ce}l{}{}}00{{}K`}{{}Db}{{KbKb}Bj}{{K`{Af{Ad}}}l}{{Kb{Af{Ad}}}l}{{Db{Af{Ad}}}l}{{K`Ah}{{Al{lAj}}}}{{KbAh}Fd}{{DbAh}Fd}???{c{{Al{Kbb}}}Ab}{cKb{}}{ce{}{}}00`{K`d}{Kbd}{Dbd}{K`Cf}{KbCf}{DbCf}666{{K`{Af{Ad}}}{{Al{lb}}}}{{Kb{Af{Ad}}}{{Al{lb}}}}{{Db{Af{Ad}}}{{Al{lb}}}}{c{{Al{e}}}{}{}}00000{cDf{}}00;;;```{cAb{}}<<<<<<{{{Kd{ce}}}{{Kd{ce}}}{KfBbEh}{AbEh}}{{ce}l{}{}}{{{Kh{c}}{Af{Ad}}}lKj}{{{Kd{ce}}{Af{Ad}}}l{{Kf{}{{Kl{d}}}}Bb}Ab}{{{Kh{c}}Ah}FdFf}{{KnAh}Fd}0{{{Kd{ce}}Ah}Fd{KfBbFf}{AbFf}}{cc{}}00{ce{}{}}00{c{{Kh{c}}}Kj}{{cCfe}{{Kd{ce}}}{KfBb}Ab}{{{Kh{c}}}dKj}{{{Kd{ce}}}d{{Kf{}{{Kl{d}}}}Bb}Ab}{{{Kh{c}}}CfKj}{{{Kd{ce}}}Cf{{Kf{}{{Kl{d}}}}Bb}Ab}{{{Kd{ce}}}{{Al{lb}}}{KfBb}Ab}{Kn{{h{C`}}}}8{cDd{}}{{{Kh{c}}{Af{Ad}}}{{Al{lb}}}Kj}{{{Kd{ce}}{Af{Ad}}}{{Al{lb}}}{{Kf{}{{Kl{d}}}}Bb}Ab}{c{{Al{e}}}{}{}}00000{cDf{}}00===`=={L`L`}{{ce}l{}{}}{{L`L`}Bj}{{L`{Af{Ad}}}l}{{L`Ah}Fd}{cc{}}{ce{}{}}{{CfCf}L`}{L`d}{L`Cf}3{{L`{Af{Ad}}}{{Al{lb}}}}<<;4````44{{{Lb{}{{Kl{c}}}}e}{{h{c}}}{}{jA`}}{{Ldc}{{h{e}}}{jA`}{}}{{{Lb{}{{Kl{c}}}}eCj}{{Lf{{Lb{}{{Kl{c}}}}c}}}{}{jA`}}{{LdcCj}{{Jn{e}}}{jA`}{}}{{Ldc{Af{e}}}Cj{jA`}{}}{{{Lb{}{{Kl{c}}}}eCji}{{Al{{Lf{{Lb{}{{Kl{c}}}}c}}En}}}{}{jA`}{{Cd{Bh}}}{{G`{c}{{Fn{g}}}}}}54{{{Lb{}{{Kl{c}}}}ek}{{Al{cEn}}}{}{jA`}{}{{Ij{g}}}{{G`{c}{{Fn{i}}}}}}0{{{Lf{ce}}Ah}Fd{FfA`}Ff}=`<<{{{Lf{ec}}}Cj{}{{Lh{Cj}{{Fn{c}}}}A`}}{{{Lf{ec}}}{{h{g}}}{}{{Lh{Cj}{{Fn{c}}}}A`}{}}{{{Lb{}{{Kl{c}}}}eCj}{{Gl{{Af{c}}{Af{c}}}}}{}{jA`}}{{{Lb{}{{Kl{c}}}}e}l{}{jA`}}{{{Lf{ec}}}{{Gl{Cj{h{Cj}}}}}{}{{Lh{Cj}{{Fn{c}}}}A`}}{c{{Al{e}}}{}{}}0{cDf{}}{ce{}{}}```000000{LjLj}{LlLl}{{ce}l{}{}}0{{LjLj}Bj}{{LjAh}Fd}{{LnAh}Fd}{{LlAh}Fd}{{{Jn{Cj}}}Lj}{cc{}}{{{Jn{d}}}Lj}11{{LjCj}Cj};;;{LjLl}<<{Lj{{Jn{Cj}}}}{LjBj}{LjLn}{LjCj}{Ln{{h{Cj}}}}{Ll{{h{c}}}{}}{{cCjCj}Lj{jA`}}{{cCjgCj}{{Al{LjEn}}}{jA`}{{Cd{Bh}}}{{G`{Cj}{{Fn{e}}}}}}{Ln{{Gl{Cj{h{Cj}}}}}}{Ll{{Gl{Cj{h{Cj}}}}}}{ce{}{}}0{c{{Al{e}}}{}{}}00000{cDf{}}00222","c":[327,473,474,475,476,477,480,483,560,561],"p":[[5,"Error",0],[1,"u32"],[5,"NonZero",710],[6,"Option",711],[10,"Rng",0],[1,"unit"],[10,"Fill",0],[10,"Sized",712],[10,"RngCore",0],[1,"u8"],[1,"slice"],[5,"Formatter",713],[5,"Error",713],[6,"Result",714],[5,"Error",715],[17,"Seed"],[10,"SeedableRng",0],[10,"Default",716],[10,"AsMut",717],[1,"f64"],[1,"bool"],[10,"SampleUniform",328],[10,"SampleRange",328],[10,"Error",718],[5,"Box",719],[10,"Into",717],[1,"u64"],[1,"i32"],[1,"usize"],[5,"Error",720],[10,"Distribution",60],[5,"DistIter",60],[5,"ThreadRng",499],[5,"String",721],[5,"TypeId",722],[10,"DistString",60],[5,"Alphanumeric",60],[5,"Standard",60],[5,"Bernoulli",60],[6,"BernoulliError",60],[5,"OpenClosed01",60],[5,"Open01",60],[5,"Slice",60],[10,"Clone",723],[5,"WeightedIndex",60],[10,"PartialOrd",724],[6,"WeightedError",60],[5,"Uniform",60],[10,"PartialEq",724],[8,"Result",713],[10,"Debug",713],[5,"DistMap",60],[5,"RangeInclusive",725],[5,"Range",725],[17,"Output"],[10,"Fn",726],[10,"IntoIterator",727],[10,"AddAssign",728],[1,"f32"],[1,"i8"],[5,"Wrapping",729],[1,"tuple"],[8,"NonZeroU64",710],[1,"i16"],[1,"array"],[1,"char"],[1,"isize"],[8,"NonZeroU128",710],[8,"NonZeroU8",710],[8,"NonZeroU16",710],[1,"i128"],[1,"u16"],[1,"i64"],[8,"NonZeroU32",710],[8,"NonZeroUsize",710],[1,"u128"],[10,"SampleBorrow",328],[5,"UniformInt",328],[5,"UniformChar",328],[5,"UniformFloat",328],[5,"UniformDuration",328],[17,"X"],[10,"UniformSampler",328],[5,"Duration",730],[5,"WeightedIndex",476],[10,"Weight",476],[5,"Vec",731],[5,"OsRng",499],[5,"StdRng",499],[5,"ReseedingRng",560],[10,"BlockRngCore",732],[5,"ReadRng",560],[10,"Read",733],[17,"Item"],[5,"ReadError",560],[5,"StepRng",608],[10,"SliceRandom",627],[10,"IteratorRandom",627],[5,"SliceChooseIter",627],[10,"Index",734],[6,"IndexVec",657],[6,"IndexVecIntoIter",657],[6,"IndexVecIter",657]],"b":[[16,"impl-Debug-for-Error"],[17,"impl-Display-for-Error"],[18,"impl-From%3CNonZero%3Cu32%3E%3E-for-Error"],[19,"impl-From%3CError%3E-for-Error"],[132,"impl-Debug-for-BernoulliError"],[133,"impl-Display-for-BernoulliError"],[141,"impl-Debug-for-WeightedError"],[142,"impl-Display-for-WeightedError"],[155,"impl-From%3CRangeInclusive%3CX%3E%3E-for-Uniform%3CX%3E"],[156,"impl-From%3CRange%3CX%3E%3E-for-Uniform%3CX%3E"],[182,"impl-Distribution%3Cf64%3E-for-OpenClosed01"],[183,"impl-Distribution%3Cf32%3E-for-OpenClosed01"],[184,"impl-Distribution%3Cf32%3E-for-Open01"],[185,"impl-Distribution%3Cf64%3E-for-Open01"],[190,"impl-Distribution%3Ci8%3E-for-Standard"],[191,"impl-Distribution%3CWrapping%3CT%3E%3E-for-Standard"],[192,"impl-Distribution%3C(A,+B,+C)%3E-for-Standard"],[193,"impl-Distribution%3CNonZero%3Cu64%3E%3E-for-Standard"],[194,"impl-Distribution%3Ci16%3E-for-Standard"],[195,"impl-Distribution%3C(A,)%3E-for-Standard"],[196,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[197,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[198,"impl-Distribution%3Cchar%3E-for-Standard"],[199,"impl-Distribution%3Cf64%3E-for-Standard"],[200,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K)%3E-for-Standard"],[201,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H)%3E-for-Standard"],[202,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[203,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[204,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[205,"impl-Distribution%3Cisize%3E-for-Standard"],[206,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[207,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[208,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[209,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[210,"impl-Distribution%3CNonZero%3Cu128%3E%3E-for-Standard"],[211,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[212,"impl-Distribution%3CNonZero%3Cu8%3E%3E-for-Standard"],[213,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[214,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I)%3E-for-Standard"],[215,"impl-Distribution%3Cu8%3E-for-Standard"],[216,"impl-Distribution%3CNonZero%3Cu16%3E%3E-for-Standard"],[217,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[218,"impl-Distribution%3Cu64%3E-for-Standard"],[219,"impl-Distribution%3Ci128%3E-for-Standard"],[220,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[221,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[222,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[223,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[224,"impl-Distribution%3Cu16%3E-for-Standard"],[225,"impl-Distribution%3C()%3E-for-Standard"],[226,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[227,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[228,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[229,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[230,"impl-Distribution%3C(A,+B,+C,+D,+E,+F)%3E-for-Standard"],[231,"impl-Distribution%3Ci64%3E-for-Standard"],[232,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[233,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[234,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[235,"impl-Distribution%3CNonZero%3Cu32%3E%3E-for-Standard"],[236,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[237,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[238,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[239,"impl-Distribution%3Cf32%3E-for-Standard"],[240,"impl-Distribution%3Cu32%3E-for-Standard"],[241,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[242,"impl-Distribution%3C(A,+B,+C,+D,+E)%3E-for-Standard"],[243,"impl-Distribution%3Ci32%3E-for-Standard"],[244,"impl-Distribution%3Cbool%3E-for-Standard"],[245,"impl-Distribution%3COption%3CT%3E%3E-for-Standard"],[246,"impl-Distribution%3C%5BT;+32%5D%3E-for-Standard"],[247,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[248,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L)%3E-for-Standard"],[249,"impl-Distribution%3C(A,+B,+C,+D)%3E-for-Standard"],[250,"impl-Distribution%3CNonZero%3Cusize%3E%3E-for-Standard"],[251,"impl-Distribution%3Cu128%3E-for-Standard"],[252,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[253,"impl-Distribution%3C(A,+B)%3E-for-Standard"],[254,"impl-Distribution%3Cusize%3E-for-Standard"],[255,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J)%3E-for-Standard"],[256,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[257,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[258,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[259,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G)%3E-for-Standard"],[373,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[374,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[375,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[376,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[377,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[378,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[379,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[380,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[381,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[382,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[383,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[384,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[386,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[387,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[391,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[392,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[393,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[394,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[395,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[396,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[397,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[398,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[399,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[400,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[401,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[402,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[404,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[405,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[408,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[409,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[410,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[411,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[412,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[413,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[414,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[415,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[416,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[417,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[418,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[419,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[421,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[422,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[426,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[427,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[428,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[429,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[430,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[431,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[432,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[433,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[434,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[435,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[436,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[437,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[438,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[439,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[441,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[442,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[443,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[444,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[445,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[446,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[447,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[448,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[449,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[450,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[451,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[452,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[575,"impl-Debug-for-ReadError"],[576,"impl-Display-for-ReadError"],[674,"impl-From%3CVec%3Cusize%3E%3E-for-IndexVec"],[676,"impl-From%3CVec%3Cu32%3E%3E-for-IndexVec"]]}],\
["rand_chacha",{"doc":"The ChaCha random number generator.","t":"FFFFFFIINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["ChaCha12Core","ChaCha12Rng","ChaCha20Core","ChaCha20Rng","ChaCha8Core","ChaCha8Rng","ChaChaCore","ChaChaRng","as_rngcore","as_rngcore","as_rngcore","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed","generate","generate","generate","get_seed","get_seed","get_seed","get_stream","get_stream","get_stream","get_word_pos","get_word_pos","get_word_pos","into","into","into","into","into","into","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","rand_core","set_stream","set_stream","set_stream","set_word_pos","set_word_pos","set_word_pos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"rand_chacha"],[129,"rand_core"],[130,"core::fmt"],[131,"core::fmt"],[132,"core::result"],[133,"core::any"]],"d":["ChaCha with 12 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","A cryptographically secure random number generator that …","ChaCha with 8 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds, low-level interface","ChaCha with 20 rounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Get the seed.","Get the seed.","Get the seed.","Get the stream number.","Get the stream number.","Get the stream number.","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Set the stream number.","Set the stream number.","Set the stream number.","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,5,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,3,5,7,2,3,4,5,6,7,2,3,3,4,5,5,6,7,7,2,3,4,5,6,7,2,4,6,3,5,7,3,5,7,3,5,7,2,3,4,5,6,7,3,5,7,3,5,7,0,3,5,7,3,5,7,2,3,4,5,6,7,3,5,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7],"f":"````````{cb{}}00{ce{}{}}00000000000{dd}{ff}{hh}{jj}{ll}{nn}{{ce}A`{}{}}00000{{dd}Ab}{{ff}Ab}{{hh}Ab}{{jj}Ab}{{ll}Ab}{{nn}Ab}{{f{Af{Ad}}}A`}{{j{Af{Ad}}}A`}{{n{Af{Ad}}}A`}{{dAh}Aj}{{fAh}Aj}{{hAh}Aj}{{jAh}Aj}{{lAh}Aj}{{nAh}Aj}{cc{}}0{df}11{hj}2{ln}3{cd{}}{cf{}}{ch{}}{cj{}}{cl{}}{cn{}}{{dc}A`{}}{{hc}A`{}}{{lc}A`{}}{f{{Al{Ad}}}}{j{{Al{Ad}}}}{n{{Al{Ad}}}}{fAn}{jAn}{nAn}{fB`}{jB`}{nB`}{ce{}{}}00000{fBb}{jBb}{nBb}987`{{fAn}A`}{{jAn}A`}{{nAn}A`}{{fB`}A`}{{jB`}A`}{{nB`}A`}999999{{f{Af{Ad}}}{{Bf{A`Bd}}}}{{j{Af{Ad}}}{{Bf{A`Bd}}}}{{n{Af{Ad}}}{{Bf{A`Bd}}}}{c{{Bf{e}}}{}{}}00000000000{cBh{}}00000>>>>>>","c":[],"p":[[10,"RngCore",129],[5,"ChaCha20Core",0],[5,"ChaCha20Rng",0],[5,"ChaCha12Core",0],[5,"ChaCha12Rng",0],[5,"ChaCha8Core",0],[5,"ChaCha8Rng",0],[1,"unit"],[1,"bool"],[1,"u8"],[1,"slice"],[5,"Formatter",130],[8,"Result",130],[1,"array"],[1,"u64"],[1,"u128"],[1,"u32"],[5,"Error",131],[6,"Result",132],[5,"TypeId",133]],"b":[]}],\
["rand_core",{"doc":"Random number generation traits","t":"TKKFTFKRKMNCNNNNNNNNMNNNNNNNNNNMCNNNCNMNMNNNNNNNNMNNNNNNNFFKRRNNNNNNNNNOONNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHH","n":["CUSTOM_START","CryptoRng","CryptoRngCore","Error","INTERNAL_START","OsRng","RngCore","Seed","SeedableRng","as_rngcore","as_rngcore","block","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","code","default","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from","from_entropy","from_rng","from_seed","impls","inner","into","into","le","new","next_u32","next_u32","next_u64","next_u64","raw_os_error","read","seed_from_u64","source","take_inner","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","BlockRng","BlockRng64","BlockRngCore","Item","Results","as_rngcore","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":[[0,"rand_core"],[57,"rand_core::block"],[110,"rand_core::impls"],[116,"rand_core::le"],[118,"core::num::nonzero"],[119,"core::option"],[120,"core::fmt"],[121,"core::fmt"],[122,"core::marker"],[123,"core::default"],[124,"core::convert"],[125,"core::result"],[126,"core::error"],[127,"alloc::boxed"],[128,"core::convert"],[129,"alloc::string"],[130,"core::any"],[131,"core::clone"],[132,"core::fmt"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","An extension trait that is automatically implemented for …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","A random number generator that retrieves randomness from …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Upcast to an <code>RngCore</code> trait object.","","The <code>BlockRngCore</code> trait and implementation helpers","","","","","","","Retrieve the error code, if any.","","Fill <code>dest</code> with random data.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Little-Endian utilities","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","","Return the next random <code>u64</code>.","","Extract the raw OS error code (if this error came from the …","","Create a new PRNG using a <code>u64</code> seed.","","Unwrap the inner error (<code>std</code> only)","","","Fill <code>dest</code> entirely with random data.","","","","","","","","A wrapper type implementing <code>RngCore</code> for some type …","A wrapper type implementing <code>RngCore</code> for some type …","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>."],"i":[5,0,0,0,5,0,0,14,0,1,3,0,5,3,5,3,3,3,5,3,2,3,5,5,3,5,5,5,3,14,14,14,0,5,5,3,0,5,2,3,2,3,5,2,14,5,5,3,5,2,3,5,3,5,3,5,3,0,0,0,31,31,29,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,31,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,0,0,0,0,0,0,0,0],"f":"`````````{bd}{cd{}}`{ce{}{}}000{ff}{{ce}h{}{}}{j{{n{l}}}}{{}f}{{d{Ab{A`}}}h}{{f{Ab{A`}}}h}{{jAd}Af}0{{fAd}Af}{Ahj}{lj}{cc{}}0{{}{{Al{}{{Aj{c}}}}}{AnB`{Bb{{Ab{A`}}}}}}{c{{Bd{{Al{}{{Aj{e}}}}j}}}d{AnB`{Bb{{Ab{A`}}}}}}{c{{Al{}{{Aj{c}}}}}{AnB`{Bb{{Ab{A`}}}}}}`{jBf}??`{cj{{Bj{{Bh{Bf}}}}}}{dBl}{fBl}{dBn}{fBn}{j{{n{C`}}}}{{d{Ab{A`}}}{{Bd{CbCd}}}}{Bn{{Al{}{{Aj{c}}}}}{AnB`{Bb{{Ab{A`}}}}}}{j{{n{Bf}}}}{j{{Bh{Bf}}}}{ce{}{}}{cCf{}}{{d{Ab{A`}}}{{Bd{hj}}}}{{f{Ab{A`}}}{{Bd{hj}}}}{c{{Bd{e}}}{}{}}000{cCh{}}0`````{cd{}}6666{{{Cj{c}}}{{Cj{c}}}{ClCnAn}}{{{D`{c}}}{{D`{c}}}{ClCnAn}}{{ce}h{}{}}0``{{{Cj{c}}{Ab{A`}}}h{{Cn{}{{Db{Bl}}}}}}{{{D`{c}}{Ab{A`}}}h{{Cn{}{{Db{Bn}}}}}}{{{Cj{c}}Ad}Af{CnDd}}{{{D`{c}}Ad}Af{CnDd}}{cc{}}0{c{{Bd{{Cj{e}}j}}}d{CnAl}}{c{{Bd{{D`{e}}j}}}d{CnAl}}{c{{Cj{e}}}{}{CnAl}}{c{{D`{e}}}{}{CnAl}}{{{Cn{}{{Db{c}}{Df{e}}}}e}h{}{{Dh{{Ab{c}}}}{Bb{{Ab{c}}}}B`}}{{{Cj{c}}Cb}hCn}{{{D`{c}}Cb}hCn}{{{Cj{c}}}CbCn}{{{D`{c}}}CbCn}{ce{}{}}0{c{{Cj{c}}}Cn}{c{{D`{c}}}Cn}{{{Cj{c}}}Bl{{Cn{}{{Db{Bl}}}}}}{{{D`{c}}}Bl{{Cn{}{{Db{Bn}}}}}}{{{Cj{c}}}Bn{{Cn{}{{Db{Bl}}}}}}{{{D`{c}}}Bn{{Cn{}{{Db{Bn}}}}}}{{{Cj{c}}}hCn}{{{D`{c}}}hCn}{Bn{{Cj{c}}}{CnAl}}{Bn{{D`{c}}}{CnAl}}::{{{Cj{c}}{Ab{A`}}}{{Bd{hj}}}{{Cn{}{{Db{Bl}}}}}}{{{D`{c}}{Ab{A`}}}{{Bd{hj}}}{{Cn{}{{Db{Bn}}}}}}{c{{Bd{e}}}{}{}}000{cCh{}}0{{c{Ab{A`}}}h{dAn}}{{{Ab{Bl}}{Ab{A`}}}{{Dj{CbCb}}}}{{{Ab{Bn}}{Ab{A`}}}{{Dj{CbCb}}}}{cBl{dAn}}{cBn{dAn}}0{{{Ab{A`}}{Ab{Bl}}}h}{{{Ab{A`}}{Ab{Bn}}}h}","c":[],"p":[[10,"CryptoRngCore",0],[10,"RngCore",0],[5,"OsRng",0],[1,"unit"],[5,"Error",0],[8,"NonZeroU32",118],[6,"Option",119],[1,"u8"],[1,"slice"],[5,"Formatter",120],[8,"Result",120],[5,"Error",121],[17,"Seed"],[10,"SeedableRng",0],[10,"Sized",122],[10,"Default",123],[10,"AsMut",124],[6,"Result",125],[10,"Error",126],[5,"Box",127],[10,"Into",124],[1,"u32"],[1,"u64"],[1,"i32"],[1,"usize"],[5,"Error",128],[5,"String",129],[5,"TypeId",130],[5,"BlockRng",57],[10,"Clone",131],[10,"BlockRngCore",57],[5,"BlockRng64",57],[17,"Item"],[10,"Debug",120],[17,"Results"],[10,"AsRef",124],[1,"tuple"]],"b":[[22,"impl-Display-for-Error"],[23,"impl-Debug-for-Error"],[25,"impl-From%3CError%3E-for-Error"],[26,"impl-From%3CNonZero%3Cu32%3E%3E-for-Error"]]}],\
["syn",{"doc":"github crates-io docs-rs","t":"FPPPPFPPPFPFPPGFPPFFGPPPPPPPPPFPPPPPPPPPPPPPFFPPGFFFPPFPPPPPFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFPGFGFFPPPGGFPPPFPFPFPPPPPPPPFPPPPFPGPFFFFFFFFPPFPPGPPGGFFPPPPPPPPPPPPPPPPTPPPPFFPPPGFFFPPFPPPPPPPIPGPPPPPPPPPPQPFGPPPPPFGPPPPFFFFFFFFFGFFFFFFFGPPPPPPFPPPPFGFGPPOOOOOOOOOONOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOQOOOOQCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOONNOOQQONNNOOOOOOOOOOOOOOOOOOONNNNNOOOOOOOOOOOOCOOOOONNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOONOOOOOONNNNOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONOOOONOOOONOOOOOOONOONCOOOOOOOOOOONNNNNNNNNNNNNOOOOOOOOOOOOOOOOQCHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNQNNNNNQQHNNNNNNOOOOOOOOOOOOCOOOONNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOCNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONONNNNNNOOOOOOOOONNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKMTMFNNNNONNHONNNNPFFFPRKFIKKIFNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKKMMPFFFFGFFFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKMFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFKFFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Abi","Add","AddAssign","And","AngleBracketed","AngleBracketedGenericArguments","Array","Array","Assign","AssocConst","AssocConst","AssocType","AssocType","Async","AttrStyle","Attribute","Await","BareFn","BareFnArg","BareVariadic","BinOp","Binary","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Block","Bool","BoundLifetimes","Brace","Bracket","Break","Byte","ByteStr","CStr","Call","Cast","Char","Closure","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivAssign","Enum","Eq","Err","Error","Expr","ExprArray","ExprAssign","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprConst","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprInfer","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","Field","Field","FieldMutability","FieldValue","Fields","FieldsNamed","FieldsUnnamed","Float","ForLoop","Ge","GenericArgument","GenericParam","Generics","Group","Group","Gt","Ident","If","ImplGenerics","ImplTrait","Index","Index","Infer","Infer","Inherited","Inner","Int","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeParam","List","Lit","Lit","LitBool","LitByte","LitByteStr","LitCStr","LitChar","LitFloat","LitInt","LitStr","Loop","Lt","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","MetaList","MetaNameValue","MethodCall","Mul","MulAssign","NameValue","Named","Named","Ne","Neg","Never","None","None","None","Not","Ok","Or","Outer","PLACEHOLDER","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Path","Path","Path","Path","PathArguments","PathSegment","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Reference","Reference","Rem","RemAssign","Repeat","Restricted","Result","Return","ReturnType","Shl","ShlAssign","Shr","ShrAssign","Slice","Str","Struct","Struct","Sub","SubAssign","Token","Trait","TraitBound","TraitBoundModifier","TraitObject","Try","TryBlock","Tuple","Tuple","Turbofish","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","UnOp","Unary","Union","Unit","Unnamed","Unnamed","Unsafe","Variant","Verbatim","Verbatim","Verbatim","Verbatim","VisRestricted","Visibility","WhereClause","WherePredicate","While","Yield","abi","and_token","and_token","apostrophe","args","args","args","arguments","as_token","as_token","as_turbofish","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","bang_token","bang_token","base","base10_digits","base10_digits","base10_parse","base10_parse","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","buffer","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","const_params","const_params_mut","const_token","const_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","delimiter","delimiter","discriminant","dot2_token","dot_token","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","impl_token","in_token","index","index","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","iter","iter_mut","leading_colon","left","len","len","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","lit","lt_token","lt_token","lt_token","lt_token","mac","mac","make_where_clause","member","member","members","meta","meta","method","modifier","mutability","mutability","mutability","mutability","name","name","name","named","new","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args","parse_args_with","parse_args_with","parse_body","parse_body_with","parse_inner","parse_macro_input","parse_mod_style","parse_named","parse_nested_meta","parse_nested_meta","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","partial_cmp","partial_cmp","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","punctuated","qself","qself","qself","receiver","require_ident","require_list","require_name_value","require_path_only","rest","right","segments","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","struct_token","style","suffix","suffix","suffix","suffix","suffix","suffix","suffix","suffix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","token","tokens","tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","turbofish","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","underscore_token","union_token","unnamed","unraw","unsafety","value","value","value","value","value","value","value","value","value","variadic","variants","vis","vis","where_clause","where_token","without_plus","without_plus","without_plus","without_plus","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","ParseNestedMeta","borrow","borrow_mut","error","from","input","into","parse_nested_meta","parser","path","try_from","try_into","type_id","value","Err","Error","Lookahead1","Nothing","Ok","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone","clone_into","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_any_delimiter","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","span","step","to_compile_error","to_owned","to_owned","to_owned","to_string","to_string","to_tokens","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AnyDelimiter","Speculative","advance_to","parse_any_delimiter","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","get","get_mut","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","pop_punct","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","And","AndAnd","AndEq","As","Async","At","Auto","Await","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Comma","Const","Continue","Crate","Default","Do","Dollar","Dot","DotDot","DotDotDot","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Minus","MinusEq","Mod","Move","Mut","Ne","Not","Or","OrEq","OrOr","Override","Paren","PathSep","Percent","PercentEq","Plus","PlusEq","Pound","Priv","Pub","Question","RArrow","Ref","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Slash","SlashEq","Star","StarEq","Static","Struct","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"syn"],[2151,"syn::buffer"],[2185,"syn::ext"],[2189,"syn::meta"],[2203,"syn::parse"],[2304,"syn::parse::discouraged"],[2308,"syn::punctuated"],[2472,"syn::spanned"],[2474,"syn::token"],[4159,"core::str::traits"],[4160,"core::cmp"],[4161,"core::convert"],[4162,"core::marker"],[4163,"core::fmt"],[4164,"core::fmt"],[4165,"core::fmt"],[4166,"core::convert"],[4167,"core::hash"],[4168,"proc_macro2"],[4169,"proc_macro"],[4170,"proc_macro2"],[4171,"core::ops::function"],[4172,"proc_macro2::extra"],[4173,"alloc::string"],[4174,"core::any"],[4175,"alloc::ffi::c_str"],[4176,"proc_macro2"],[4177,"proc_macro2"],[4178,"core::ops::function"],[4179,"core::default"]],"d":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","An equality constraint on an associated constant: the …","An equality constraint on an associated constant: the …","A binding (equality constraint) on an associated type: the …","A binding (equality constraint) on an associated type: the …","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute, like <code>#[repr(transparent)]</code>.","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","The variadic argument of a function pointer like …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A nul-terminated C-string literal: <code>c&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","","The <code>==</code> operator (equality)","Contains the error value","Error returned when a Syn parser cannot parse the input …","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","A blocked scope: <code>{ ... }</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Unused, but reserved for RFC 3323 restrictions.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A for loop: <code>for pat in expr { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","An expression contained within invisible delimiters.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","A word of Rust code, which may be a keyword or legal …","An <code>if</code> expression with an optional <code>else</code> block: …","Returned by <code>Generics::split_for_impl</code>.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime parameter: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A nul-terminated C-string literal: <code>c&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","The never type: <code>!</code>.","","","","The <code>!</code> operator for logical inversion","Contains the success value","The <code>||</code> operator (logical or)","","An unspecified invalid expression.","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An array literal constructed from one repeated element: …","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A dynamically sized slice type: <code>[T]</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type argument.","A particular type is returned.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","An enum variant.","Tokens in expression position not interpreted by Syn.","","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type being bounded","","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","Parse a set of curly braces and expose their content to …","","","","","Parse a set of square brackets and expose their content to …","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","Iterator over the constant parameters in <code>self.params</code>.","Iterator over the constant parameters in <code>self.params</code>.","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","","","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension traits to provide parsing methods on foreign …","","Content stored in the variant.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","If this path consists of a single ident, returns the ident.","","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","","","","","","","","","","<code>(A, B)</code>","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","Returns the number of fields.","","","","","Iterator over the lifetime parameters in <code>self.params</code>.","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Iterator over the lifetime parameters in <code>self.params</code>.","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","Get an iterator over the fields of a struct or variant as …","Facility for interpreting structured content inside of an …","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","<code>C</code>","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","See <code>Attribute::parse_args</code>.","Parse the arguments to the attribute using the given …","See <code>Attribute::parse_args_with</code>.","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parse the arguments to the attribute, expecting it to …","See <code>Attribute::parse_nested_meta</code>.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","","","Returns the path that identifies the interpretation of …","Returns the path that begins this structured meta item.","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","An error if this path is not a single ident, as defined in …","Error if this is a <code>Meta::Path</code> or <code>Meta::NameValue</code>.","Error if this is a <code>Meta::Path</code> or <code>Meta::List</code>.","Error if this is a <code>Meta::List</code> or <code>Meta::NameValue</code>.","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","Returns the span of this <code>Ident</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…okens representing Rust punctuation, keywords, and …terator over the type parameters in <code>self.params</code>.","Iterator over the type parameters in <code>self.params</code>.","","","","","","","","","","","","","","","","","","","","","In some positions, types may not contain the <code>+</code> character, …","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Context for parsing a single property in the conventional …","","","Report that the attribute’s content did not conform to …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Used when parsing <code>list(...)</code> syntax <strong>if</strong> the content inside …","Make a parser that is usable with <code>parse_macro_input!</code> in a …","","","","","Used when parsing <code>key = &quot;value&quot;</code> syntax.","Contains the error value","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","Contains the success value","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are no more tokens remaining to be …","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","The source location of the error.","Returns the <code>Span</code> of the next token in the parse stream, or …","","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support manipulating …","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","Returns the delimiter, the span of the delimiter token, …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","<strong>A punctuated sequence of syntax tree nodes of type <code>T</code> </strong>…","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Borrows the element at the given index.","Mutably borrows the element at the given index.","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Removes the trailing punctuation from this punctuated …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>become</code>","<code>box</code>","<code>{</code>…<code>}</code>","<code>[</code>…<code>]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>-</code>","<code>-=</code>","<code>mod</code>","<code>move</code>","<code>mut</code>","<code>!=</code>","<code>!</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(</code>…<code>)</code>","<code>::</code>","<code>%</code>","<code>%=</code>","<code>+</code>","<code>+=</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>/</code>","<code>/=</code>","<code>*</code>","<code>*=</code>","<code>static</code>","<code>struct</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,67,67,67,71,0,26,82,26,0,72,0,72,26,0,0,26,82,0,0,0,26,67,67,67,67,67,67,26,58,0,66,66,26,58,58,58,26,26,58,26,26,46,72,0,0,72,26,0,0,0,0,100,68,0,67,67,22,67,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,58,26,67,0,0,0,26,82,67,0,26,0,82,0,26,26,82,79,12,58,67,26,0,46,51,55,72,0,13,0,26,0,0,0,0,0,0,0,0,26,67,0,26,82,0,26,53,0,0,0,0,26,67,67,13,17,42,67,68,82,53,71,81,68,6,67,12,26,26,66,82,71,0,0,13,26,82,0,0,0,0,82,79,0,26,26,82,67,67,26,79,0,26,0,67,67,67,67,82,58,22,26,67,67,0,51,0,0,82,26,26,26,82,0,0,46,55,72,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,22,17,17,42,26,0,26,51,58,82,0,0,0,0,26,26,84,38,93,10,28,35,73,70,29,78,1,16,20,21,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,47,48,49,98,99,65,89,30,3,5,3,5,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,130,125,136,132,27,133,131,28,29,121,126,117,30,137,31,122,32,135,138,33,116,34,118,35,36,37,119,38,120,128,39,134,123,40,41,129,124,127,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,3,5,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,130,125,136,132,27,133,131,28,29,121,126,117,30,137,31,122,32,135,138,33,116,34,118,35,36,37,119,38,120,128,39,134,123,40,41,129,124,127,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,3,5,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,57,47,48,56,57,76,86,95,18,24,39,0,11,32,83,94,0,0,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,3,5,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,3,5,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,8,10,73,20,44,47,48,49,56,57,76,99,45,45,49,92,0,0,21,45,50,71,48,49,14,65,16,39,30,35,99,95,83,85,90,92,93,94,40,96,24,8,8,10,42,43,15,48,49,74,75,29,31,32,36,38,41,44,0,97,16,23,25,39,8,8,8,10,42,43,3,5,84,50,8,8,8,8,8,8,8,9,1,2,10,11,12,13,13,13,13,14,15,16,17,17,17,18,19,20,21,22,23,24,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,130,125,136,132,27,133,131,28,29,121,126,117,30,137,31,122,32,135,138,33,116,34,118,35,36,37,119,38,120,128,39,134,123,40,41,129,124,127,42,42,42,42,43,43,44,45,46,46,46,46,47,48,48,49,50,51,51,51,52,53,54,55,55,55,56,57,58,58,58,58,58,58,58,58,58,59,60,61,62,63,3,3,5,5,64,65,66,67,68,69,69,70,70,71,72,73,74,75,76,77,78,79,80,81,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,28,21,74,75,76,69,31,85,45,50,73,78,8,10,42,43,10,16,20,21,48,49,70,74,75,76,86,80,32,43,77,84,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,130,125,136,132,27,133,131,28,29,121,126,117,30,137,31,122,32,135,138,33,116,34,118,35,36,37,119,38,120,128,39,134,123,40,41,129,124,127,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,3,5,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,17,17,17,17,71,69,71,17,17,69,27,17,83,47,56,93,45,50,52,57,84,45,33,45,50,73,78,34,88,45,30,44,17,0,11,35,52,20,38,92,93,97,98,99,18,8,10,47,58,59,60,61,62,63,3,5,64,8,27,41,77,84,45,19,28,35,36,40,52,77,80,84,90,96,0,0,0,8,10,13,14,15,16,18,19,21,26,33,34,37,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,59,60,61,62,63,3,5,64,65,67,68,69,70,72,73,77,79,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,100,0,8,11,14,11,14,65,65,11,0,69,20,11,14,11,0,0,0,20,59,8,10,11,13,14,15,37,39,52,65,80,91,78,11,54,80,0,37,39,91,35,69,13,13,13,39,27,69,23,83,8,10,58,59,60,61,62,63,3,5,64,8,8,8,9,1,2,10,10,11,13,14,15,16,17,18,19,20,21,26,130,125,136,132,27,133,131,28,29,121,126,117,30,137,31,122,32,135,138,33,116,34,118,35,36,37,119,38,120,128,39,134,123,40,41,129,124,127,42,42,43,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,58,59,59,60,60,61,61,62,62,63,63,3,3,5,5,64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,43,64,0,45,92,23,11,58,59,60,61,62,63,3,5,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,3,5,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,8,10,3,5,8,9,1,2,10,11,13,14,15,16,17,18,19,20,21,26,130,125,136,132,27,133,131,28,29,121,126,117,30,137,31,122,32,135,138,33,116,34,118,35,36,37,119,38,120,128,39,134,123,40,41,129,124,127,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,3,5,64,65,67,68,69,70,71,72,73,74,75,76,77,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,0,59,60,61,62,63,3,5,64,14,65,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,130,125,136,132,27,133,131,28,29,121,126,117,30,137,31,122,32,135,138,33,116,34,118,35,36,37,119,38,120,128,39,134,123,40,41,129,124,127,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,3,5,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,130,125,136,132,27,133,131,28,29,121,126,117,30,137,31,122,32,135,138,33,116,34,118,35,36,37,119,38,120,128,39,134,123,40,41,129,124,127,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,3,5,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,35,20,29,49,74,78,98,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,130,125,136,132,27,133,131,28,29,121,126,117,30,137,31,122,32,135,138,33,116,34,118,35,36,37,119,38,120,128,39,134,123,40,41,129,124,127,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,3,5,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,45,45,87,25,19,8,84,59,60,61,62,63,64,15,64,75,84,24,20,21,45,54,82,86,95,100,0,0,165,165,166,165,166,166,166,166,166,166,165,166,166,166,165,166,166,166,165,165,166,166,166,166,166,166,165,166,165,166,165,166,0,170,170,170,0,157,157,157,157,157,157,157,0,157,157,157,157,157,6,0,0,0,6,155,0,0,0,0,0,0,0,173,171,176,173,174,175,171,176,173,174,175,173,171,174,175,171,174,175,171,173,174,0,173,176,173,174,171,171,171,173,173,173,171,171,176,173,174,175,171,176,173,174,175,171,171,171,173,173,171,171,152,173,155,175,155,173,155,173,176,173,173,173,171,173,175,173,171,171,174,175,171,173,175,171,176,173,174,175,171,176,173,174,175,171,176,173,174,175,0,0,184,185,190,0,0,0,0,0,0,0,0,190,181,187,192,188,189,144,145,190,181,187,192,188,189,144,145,190,181,181,187,188,189,144,190,181,181,187,188,189,144,190,190,181,181,181,181,181,181,181,187,192,188,189,144,145,190,181,181,181,181,181,181,181,181,187,192,188,189,144,145,190,181,181,181,187,192,188,189,144,145,181,190,190,181,181,181,181,181,181,187,192,188,189,144,145,181,190,187,192,188,189,144,145,187,192,188,189,144,145,181,181,181,181,181,181,181,181,190,190,181,181,181,187,192,188,189,144,145,181,190,181,187,188,189,144,190,181,190,181,181,187,192,188,189,144,145,190,181,187,192,188,189,144,145,190,181,187,192,188,189,144,145,190,190,190,0,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,111,196,197,198,199,200,201,202,203,204,205,110,206,207,208,209,210,115,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,112,113,229,230,114,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,195,111,196,197,198,199,200,201,202,203,204,205,110,206,207,208,209,210,115,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,112,113,229,230,114,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,195,111,196,197,198,199,200,201,202,203,204,205,110,206,207,208,209,210,115,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,112,113,229,230,114,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,195,111,196,197,198,199,200,201,202,203,204,205,110,206,207,208,209,210,115,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,112,113,229,230,114,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,195,111,196,197,198,199,200,201,202,203,204,205,110,206,207,208,209,210,115,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,112,113,229,230,114,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,111,243,246,247,249,250,251,252,256,260,263,264,267,268,272,274,276,277,279,284,286,288,111,243,246,247,249,250,251,252,256,260,263,264,267,268,272,274,276,277,279,284,286,288,195,111,196,197,198,199,200,201,202,203,204,205,110,206,207,208,209,210,115,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,112,113,229,230,114,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,195,111,196,197,198,199,200,201,202,203,204,205,110,206,207,208,209,210,115,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,112,113,229,230,114,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,111,196,197,198,199,200,201,202,203,204,205,110,206,207,208,209,210,115,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,112,113,229,230,114,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,111,196,197,198,199,200,201,202,203,204,205,110,206,207,208,209,210,115,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,112,113,229,230,114,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,195,196,197,198,199,200,201,202,203,204,205,110,206,207,208,209,210,115,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,112,113,229,230,114,231,232,233,234,235,236,237,238,239,240,241,242,289,290,291,111,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,195,289,290,291,195,111,196,197,198,199,200,201,202,203,204,205,110,206,207,208,209,210,115,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,112,113,229,230,114,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,111,196,197,198,199,200,201,202,203,204,205,110,206,207,208,209,210,115,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,112,113,229,230,114,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,195,111,196,197,198,199,200,201,202,203,204,205,110,206,207,208,209,210,115,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,112,113,229,230,114,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,195,111,196,197,198,199,200,201,202,203,204,205,110,206,207,208,209,210,115,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,112,113,229,230,114,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,195,111,196,197,198,199,200,201,202,203,204,205,110,206,207,208,209,210,115,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,112,113,229,230,114,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291],"f":"```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{bd}```````````````````````````{fh}{jh}{f{{l{c}}}n}{j{{l{c}}}n}{ce{}{}}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000``````````````````{A`A`}{AbAb}{bb}{dd}{AdAd}{AfAf}{AhAh}{AjAj}{AlAl}{AnAn}{B`B`}{BbBb}{BdBd}{BfBf}{BhBh}{BjBj}{BlBl}{BnBn}{C`C`}{CbCb}{CdCd}{CfCf}{ChCh}{CjCj}{ClCl}{CnCn}{D`D`}{DbDb}{DdDd}{DfDf}{DhDh}{DjDj}{DlDl}{DnDn}{E`E`}{EbEb}{EdEd}{EfEf}{EhEh}{EjEj}{ElEl}{EnEn}{F`F`}{FbFb}{FdFd}{FfFf}{FhFh}{FjFj}{FlFl}{FnFn}{G`G`}{GbGb}{GdGd}{GfGf}{GhGh}{GjGj}{GlGl}{GnGn}{ff}{jj}{H`H`}{HbHb}{HdHd}{HfHf}{HhHh}{HjHj}{HlHl}{HnHn}{I`I`}{IbIb}{IdId}{IfIf}{IhIh}{IjIj}{IlIl}{InIn}{J`J`}{JbJb}{JdJd}{JfJf}{JhJh}{JjJj}{JlJl}{JnJn}{K`K`}{KbKb}{KdKd}{KfKf}{KhKh}{KjKj}{KlKl}{KnKn}{L`L`}{LbLb}{LdLd}{LfLf}{LhLh}{{ce}Lj{}{}}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{{A`A`}Ll}{{AdAd}Ll}`````````````````{{}Ej}{{}Fd}{{}Hn}```````````````````{{A`A`}Ln}{{A`c}Ln{{M`{h}}Mb}}{{AdAd}Ln}{{EdEd}Ln}{{EfEf}Ln}``````````````````{{A`Md}{{Mh{LjMf}}}}00{{AdMd}Mj}{{EdMd}Mj}{{EfMd}Mj}{{fMd}Mj}{{jMd}Mj}``{MlA`}{MnA`}{N`A`}{NbA`}{NdA`}{cc{}}{NfA`}111111{AnAj}2{AlAj}{HjAj}444{BfBb}{BdBb}666666666{NhCd}{CfCd}{NjCd}{E`Cd}{NlCd}{NnCd}{O`Cd}{ObCd}{DnCd}{OdCd}{EbCd}{ClCd}{DjCd}{OfCd}{DfCd}{OhCd}{OjCd}{CnCd}{OlCd}{CjCd}{cc{}}{OnCd}{DlCd}{A`Cd}{AbCd}{AdCd}{ChCd}{AfCd}{D`Cd}{AhCd}{AjCd}{AlCd}{AnCd}{DbCd}{DhCd}{DdCd}{AA`Cd}{AAbCd}{AAdCd}{cc{}}0000000000000000000000000000000000000{A`Ed}{EfEd}{AAfEd}3{AAfEf}444{FbEl}5{EnEl}{F`El}77{A`F`}88{AdFf}{FhFf}::::{GbFn}{G`Fn}<<<<{GjGd}{GlGd}{GhGd}{H`Gd}{jGd}{GnGd}{fGd}{GfGd}{cc{}}0000{AAhf}11{AAhj}222222{cHj{{AAj{Hl}}}}{cHl{{AAj{A`}}}}444444444444{JfJd}{KlJd}{K`Jd}7{KhJd}{JnJd}{KdJd}{KbJd}{JlJd}{KjJd}{KfJd}{KnJd}{JhJd}{L`Jd}{JjJd}{cc{}}00000000000000000`````{Hj{{AAl{A`}}}}``````{{A`c}LjAAn}{{Adc}LjAAn}{{Edc}LjAAn}{{Efc}LjAAn}````````````````{ce{}{}}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{Bbc{}}00{BbLn}{HnLn}{{Hjc}LnMb}1{Bb{{AB`{Bh}}}}{Bb{{ABb{Bh}}}}``{BbAAf}`````````````````{EjFl}```````````````{{hABd}A`}{{hABd}Ad}{AdEn}{AAhGd}{{hABd}Gf}{{{ABh{ABf}}ABd}Gh}{{ABjABd}Gj}{{ABfABd}Gl}{{ABlABd}Gn}{{hABd}f}{{hABd}j}{{LnABd}H`};``````````````````{ABn{{l{c}}}AC`}{ACb{{l{A`}}}}{ACb{{l{Ad}}}}{ACb{{l{Aj}}}}{ACb{{l{Al}}}}{ACb{{l{An}}}}{ACb{{l{B`}}}}{ACb{{l{Bd}}}}{ACb{{l{Bf}}}}{ACb{{l{Bj}}}}{ACb{{l{Cd}}}}{ACb{{l{Db}}}}{ACb{{l{Dd}}}}{ACb{{l{Dj}}}}{ACb{{l{Dn}}}}{ACb{{l{Ed}}}}{ACb{{l{Ef}}}}{ACb{{l{Eh}}}}{ACb{{l{Ej}}}}{ACb{{l{El}}}}{ACb{{l{En}}}}{ACb{{l{F`}}}}{ACb{{l{Fb}}}}{ACb{{l{Fd}}}}{ACb{{l{Ff}}}}{ACb{{l{Fh}}}}{ACb{{l{Fj}}}}{ACb{{l{Fl}}}}{ACb{{l{Fn}}}}{ACb{{l{Gd}}}}{Gf{{l{c}}}AC`}{ACb{{l{Gf}}}}{ACb{{l{Gh}}}}{ACb{{l{Gj}}}}{ACb{{l{Gl}}}}{ACb{{l{Gn}}}}{ACb{{l{f}}}}{ACb{{l{j}}}}{ACb{{l{H`}}}}{ACb{{l{Hb}}}}{ACb{{l{Hf}}}}{ACb{{l{Hh}}}}{ACb{{l{Hj}}}}{ACb{{l{Hl}}}}{ACb{{l{I`}}}}{ACb{{l{Ib}}}}{ACb{{l{Ij}}}}{ACb{{l{In}}}}{ACb{{l{Jd}}}}{ACb{{l{Jf}}}}{ACb{{l{Jh}}}}{ACb{{l{Jj}}}}{ACb{{l{Jl}}}}{ACb{{l{Jn}}}}{ACb{{l{K`}}}}{ACb{{l{Kb}}}}{ACb{{l{Kd}}}}{ACb{{l{Kf}}}}{ACb{{l{Kh}}}}{ACb{{l{Kj}}}}{ACb{{l{Kl}}}}{ACb{{l{Kn}}}}{ACb{{l{L`}}}}{ACb{{l{Lb}}}}{ACb{{l{Ld}}}}{ACb{{l{Lh}}}}{ACd{{l{c}}}AC`}{ACb{{l{A`}}}}{Af{{l{c}}}AC`}{Al{{l{c}}}AC`}{{Afc}lACf}{{Alc}lACf}{Hb{{l{c}}}AC`}{{Hbc}lACf}{ACb{{l{{ACh{Af}}}}}}`{ACb{{l{Hj}}}}{ACb{{l{Bh}}}}{{Afc}{{l{Lj}}}{{ACn{ACj}{{ACl{{l{Lj}}}}}}}}{{Alc}{{l{Lj}}}{{ACn{ACj}{{ACl{{l{Lj}}}}}}}}4``{h{{l{c}}}AC`}3{{Gfc}lACf}{{A`A`}{{AAl{Ll}}}}{{AdAd}{{AAl{Ll}}}}{AfHj}{AjHj}`````````````````{Hj{{l{A`}}}}{Aj{{l{Al}}}}{Aj{{l{An}}}}{Aj{{l{Hj}}}}`````{{A`ABd}Lj}{{AdABd}Lj}{{GdABd}Lj}{{GfABd}Lj}{{GhABd}Lj}{{GjABd}Lj}{{GlABd}Lj}{{GnABd}Lj}{{fABd}Lj}{{jABd}Lj}{{H`ABd}Lj}{A`ABd}{A`{{AAl{ABd}}}}{cABd{}}000{AdABd}111111111111111111111111111111111111111111111111111{Ed{{AAl{ABd}}}}{Ef{{AAl{ABd}}}}333333333333333{GdABd}4{GfABd}55{GhABd}6{GjABd}7{GlABd}{GnABd}9{fABd}::{jABd};{H`ABd}<{HdAD`}==========={IlABd}>>>>>>>>>>>>>>>>>>>>>```{Ej{{ADb{Abb{AAl{Fl}}}}}}```{Gdh}{Gfh}{Ghh}{Gjh}{Glh}{Gnh}{fh}{jh}{ce{}{}}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{cADd{}}000{{A`ACd}Lj}{{AbACd}Lj}{{bACd}Lj}{{dACd}Lj}{{AdACd}Lj}{{AfACd}Lj}{{AjACd}Lj}{{AlACd}Lj}{{AnACd}Lj}{{B`ACd}Lj}{{BbACd}Lj}{{BdACd}Lj}{{BfACd}Lj}{{BhACd}Lj}{{BjACd}Lj}{{CdACd}Lj}{{AdACd}Lj}{{OjACd}Lj}{{AA`ACd}Lj}{{AhACd}Lj}{{CfACd}Lj}{{AjACd}Lj}{{AfACd}Lj}{{ChACd}Lj}{{CjACd}Lj}{{ObACd}Lj}{{OlACd}Lj}{{NjACd}Lj}{{ClACd}Lj}{{AAbACd}Lj}{{CnACd}Lj}{{OdACd}Lj}{{D`ACd}Lj}{{AnACd}Lj}{{AAdACd}Lj}{{DbACd}Lj}{{NhACd}Lj}{{DdACd}Lj}{{NlACd}Lj}{{DfACd}Lj}{{DhACd}Lj}{{DjACd}Lj}{{NnACd}Lj}{{DlACd}Lj}{{O`ACd}Lj}{{A`ACd}Lj}{{DnACd}Lj}{{AlACd}Lj}{{OfACd}Lj}{{E`ACd}Lj}{{EbACd}Lj}{{AbACd}Lj}{{OhACd}Lj}{{OnACd}Lj}{{EdACd}Lj}{{EfACd}Lj}{{EhACd}Lj}{{EjACd}Lj}{{ElACd}Lj}{{EnACd}Lj}{{F`ACd}Lj}{{FbACd}Lj}{{FdACd}Lj}{{FfACd}Lj}{{FhACd}Lj}{{FjACd}Lj}{{FlACd}Lj}{{FnACd}Lj}{{G`ACd}Lj}{{GbACd}Lj}{{GdACd}Lj}{{GfACd}Lj}{{GhACd}Lj}{{GjACd}Lj}{{GlACd}Lj}{{GnACd}Lj}{{fACd}Lj}{{jACd}Lj}{{H`ACd}Lj}{{HbACd}Lj}{{HfACd}Lj}{{HhACd}Lj}{{HjACd}Lj}{{HlACd}Lj}{{HnACd}Lj}{{I`ACd}Lj}{{IbACd}Lj}{{IdACd}Lj}{{IfACd}Lj}{{IhACd}Lj}{{IjACd}Lj}{{InACd}Lj}{{J`ACd}Lj}{{JdACd}Lj}{{JfACd}Lj}{{JhACd}Lj}{{JjACd}Lj}{{JlACd}Lj}{{JnACd}Lj}{{K`ACd}Lj}{{KbACd}Lj}{{KdACd}Lj}{{KfACd}Lj}{{KhACd}Lj}{{KjACd}Lj}{{KlACd}Lj}{{KnACd}Lj}{{L`ACd}Lj}{{LbACd}Lj}{{LdACd}Lj}{{LfACd}Lj}{{LhACd}Lj}`{GfAAh}{GhAAh}{GjAAh}{GlAAh}{GnAAh}{fAAh}{jAAh}{H`A`}``{c{{Mh{e}}}{}{}}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000```````{cADf{}}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`````{A`A`}`{GfADd}{Gh{{ACh{ABf}}}}{GjADh}{GlABf}{GnABl}{H`Ln}`````````{ACb{{l{Jd}}}}{ACb{{l{Jl}}}}{ACb{{l{Kn}}}}{ACb{{l{Lh}}}}``{ADjADl}{ce{}{}}000{ADlADl}{{ce}Lj{}{}}{{}ADl}{ADlLn}{{ADlADl}Ln}{cc{}}0{{ADlADn}{{AAl{{ADb{ADlAD`ADl}}}}}}{ADl{{AAl{{ADb{A`ADl}}}}}}88{ADl{{AAl{{ADb{AdADl}}}}}}{ADl{{AAl{{ADb{AAhADl}}}}}}{ABnADj}{ACdADj}{{ADlADl}{{AAl{Ll}}}}{ADl{{AAl{{ADb{AE`ADl}}}}}}{ADlABd}?{ADlACd}{ADl{{AAl{{ADb{AEbADl}}}}}}{c{{Mh{e}}}{}{}}000{cADf{}}0`{ACb{{l{AEd}}}}`{AEdA`}`{ce{}{}}0{{ACjc}AEfAEh}{cc{}}`2{{ACjc}{{l{Lj}}}{{ACn{ACj}{{ACl{{l{Lj}}}}}}}}{c{{`{{ACf{}{{ACl{Lj}}}}}}}{{ACn{ACj}{{ACl{{l{Lj}}}}}}}}`887{ACj{{l{ACb}}}}`````````````{{AEjAEj}Lj}6666666666{AEj{{l{c}}}{}}{AEfAEf}{AElAEl}{AEnAEn}{{ce}Lj{}{}}00{{AEfAEf}Lj}{AEjADl}{AElc{}}`{AEjLj}{AF`AEf}{{AEjc}AEfAEh}{{AElc}AEfAEh}{{AEfc}Lj{{AFd{}{{AFb{AEf}}}}}}{{AEfMd}Mj}0{{AEjMd}Mj}0{AEjAEj}{AFfAEf}{cc{}}0000{ce{}{}}0000{AEfACd}{AEfc{}}0{AEjLn}{AEjAF`}{{ABdc}AEfAEh}{{ce}AEfAFhAEh}{ACb{{l{AC`}}}}{AEj{{l{c}}}AC`}{{{ACf{}{{ACl{c}}}}ABn}{{l{c}}}{}}{ACb{{l{AEn}}}}{{{ACf{}{{ACl{c}}}}ACd}{{l{c}}}{}}{AEj{{l{{ADb{ADnAD`AEj}}}}}}{{{ACf{}{{ACl{c}}}}h}{{l{c}}}{}}{{AEjc}{{l{{AFj{e}}}}}AFl{}}{{AF`c}LnAFl}{{AEjc}LnAFl}00{AEfABd}{AEjABd}{cABd{}}{{AEje}{{l{c}}}{}{{AFn{AEl}{{ACl{{l{{ADb{cADl}}}}}}}}}}{AEfACd}{ce{}{}}00{cADd{}}0{{AEnACd}Lj}{c{{Mh{e}}}{}{}}000000000{cADf{}}0000``{{AG`AG`}Lj}{AGb{{l{{ADb{ADnAD`AEj}}}}}}``````````6666666666666666{{{AFj{ce}}}Lj{}{}}{{{AFj{ce}}}{{AFj{ce}}}AGdAGd}{{{AGf{ce}}}{{AGf{ce}}}{}{}}{{{AGh{ce}}}{{AGh{ce}}}AGdAGd}{{{AGj{c}}}{{AGj{c}}}AGd}{{{AB`{c}}}{{AB`{c}}}{}}{{{AGl{ce}}}{{AGl{ce}}}AGdAGd}{{{AFj{ce}}{AFj{ce}}}LjAGdAGd}{{ce}Lj{}{}}000002{{}{{AFj{ce}}}{}{}}{{{AFj{ce}}}Ln{}{}}{{{AFj{ce}}g}Lj{}AGn{{AFd{}{{AFb{c}}}}}}{{{AFj{ce}}g}Lj{}AGn{{AFd{}{{AFb{{AGl{ce}}}}}}}}{{{AFj{ce}}}{{AAl{c}}}{}{}}0{cc{}}0000000{g{{AFj{ce}}}{}{}{{AFd{}{{AFb{{AGl{ce}}}}}}}}{e{{AFj{cg}}}{}{{AFd{}{{AFb{c}}}}}AGn}{{{AFj{ce}}AAf}{{AAl{c}}}{}{}}0{{{AFj{ce}}AAf}g{}{}{}}0{{{AFj{ce}}AAfc}Lj{}AGn}{ce{}{}}0000000{{{AFj{ce}}}g{}{}{}}00111111{{{AFj{ce}}}{{AGh{ce}}}{}{}}{{{AGl{ce}}}{{ADb{c{AAl{e}}}}}{}{}}{{{AGl{ce}}}c{}{}}>{{{AFj{ce}}}{{AB`{c}}}{}{}}{{{AFj{ce}}}{{ABb{c}}}{}{}}=={{{AFj{ce}}}AAf{}{}}{{{AGf{ce}}}AAf{}{}}{{{AH`{ce}}}AAf{}{}}{{{AGh{ce}}}AAf{}{}}{{{AGj{c}}}AAf{}}{{{AB`{c}}}AAf{}}{{{ABb{c}}}AAf{}}{{}{{AFj{ce}}}{}{}}{{c{AAl{e}}}{{AGl{ce}}}{}{}}{{{AGf{ce}}}{{AAl{g}}}{}{}{}}{{{AH`{ce}}}{{AAl{g}}}{}{}{}}{{{AGh{ce}}}{{AAl{g}}}{}{}{}}{{{AGj{c}}}{{AAl{e}}}{}{}}{{{AB`{c}}}{{AAl{e}}}{}{}}{{{ABb{c}}}{{AAl{e}}}{}{}}543210{{{AFj{ce}}}{{AGf{ce}}}{}{}}{{{AFj{ce}}}{{AH`{ce}}}{}{}}{ACb{{l{{AFj{ce}}}}}AC`{AHbAC`}}{ACb{{l{{AFj{ce}}}}}{}{AHbAC`}}{ACb{{l{{AFj{ce}}}}}AC`AC`}{ACb{{l{{AFj{ce}}}}}{}AC`}{{{AFj{ce}}}{{AAl{{AGl{ce}}}}}{}{}}{{{AFj{ce}}}{{AAl{e}}}{}{}}{{{AGl{ce}}}{{AAl{e}}}{}{}}0{{{AFj{ce}}c}Lj{}AGn}{{{AFj{ce}}e}Lj{}{}}{{{AFj{ce}}c}Lj{}{}}{{{AGf{ce}}}{{ADb{AAf{AAl{AAf}}}}}{}{}}{{{AH`{ce}}}{{ADb{AAf{AAl{AAf}}}}}{}{}}{{{AGh{ce}}}{{ADb{AAf{AAl{AAf}}}}}{}{}}{{{AGj{c}}}{{ADb{AAf{AAl{AAf}}}}}{}}{{{AB`{c}}}{{ADb{AAf{AAl{AAf}}}}}{}}{{{ABb{c}}}{{ADb{AAf{AAl{AAf}}}}}{}}{cABd{}}0{ce{}{}}00000{{{AFj{ce}}ACd}LjAFhAFh}{{{AGl{ce}}ACd}LjAFhAFh}{{{AFj{ce}}}Ln{}{}}{c{{Mh{e}}}{}{}}000000000000000{cADf{}}0000000{{{AGl{ce}}}c{}{}}0`{AHdABd}````````````````````````````````````````````````````````````````````````````````````````````````````````77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777{AHfAHf}{MnMn}{AHhAHh}{AHjAHj}{AHlAHl}{AHnAHn}{AI`AI`}{AIbAIb}{AIdAId}{AIfAIf}{AIhAIh}{AIjAIj}{MlMl}{AIlAIl}{AInAIn}{AJ`AJ`}{AJbAJb}{AJdAJd}{NfNf}{AJfAJf}{AJhAJh}{AJjAJj}{AJlAJl}{AJnAJn}{AK`AK`}{AKbAKb}{AKdAKd}{AKfAKf}{AKhAKh}{AKjAKj}{AKlAKl}{AKnAKn}{AL`AL`}{ALbALb}{ALdALd}{ALfALf}{ALhALh}{N`N`}{NbNb}{ALjALj}{ALlALl}{NdNd}{ALnALn}{AM`AM`}{AMbAMb}{AMdAMd}{AMfAMf}{AMhAMh}{AMjAMj}{AMlAMl}{AMnAMn}{AN`AN`}{ANbANb}{ANdANd}{ANfANf}{ANhANh}{ANjANj}{ANlANl}{ANnANn}{AO`AO`}{AObAOb}{AOdAOd}{AOfAOf}{AOhAOh}{AOjAOj}{AOlAOl}{AOnAOn}{B`B`}{BbBb}{BdBd}{BfBf}{BhBh}{BjBj}{BlBl}{BnBn}{BA`BA`}{BAbBAb}{BAdBAd}{BAfBAf}{BAhBAh}{BAjBAj}{BAlBAl}{BAnBAn}{BB`BB`}{BBbBBb}{BBdBBd}{BBfBBf}{BBhBBh}{BBjBBj}{BBlBBl}{BBnBBn}{BC`BC`}{BCbBCb}{BCdBCd}{BCfBCf}{BChBCh}{BCjBCj}{BClBCl}{BCnBCn}{BD`BD`}{BDbBDb}{BDdBDd}{BDfBDf}{{ce}Lj{}{}}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{{}AHf}{{}Mn}{{}AHh}{{}AHj}{{}AHl}{{}AHn}{{}AI`}{{}AIb}{{}AId}{{}AIf}{{}AIh}{{}AIj}{{}Ml}{{}AIl}{{}AIn}{{}AJ`}{{}AJb}{{}AJd}{{}Nf}{{}AJf}{{}AJh}{{}AJj}{{}AJl}{{}AJn}{{}AK`}{{}AKb}{{}AKd}{{}AKf}{{}AKh}{{}AKj}{{}AKl}{{}AKn}{{}AL`}{{}ALb}{{}ALd}{{}ALf}{{}ALh}{{}N`}{{}Nb}{{}ALj}{{}ALl}{{}Nd}{{}ALn}{{}AM`}{{}AMb}{{}AMd}{{}AMf}{{}AMh}{{}AMj}{{}AMl}{{}AMn}{{}AN`}{{}ANb}{{}ANd}{{}ANf}{{}ANh}{{}ANj}{{}ANl}{{}ANn}{{}AO`}{{}AOb}{{}AOd}{{}AOf}{{}AOh}{{}AOj}{{}AOl}{{}AOn}{{}B`}{{}Bb}{{}Bd}{{}Bf}{{}Bh}{{}Bj}{{}Bl}{{}Bn}{{}BA`}{{}BAb}{{}BAd}{{}BAf}{{}BAh}{{}BAj}{{}BAl}{{}BAn}{{}BB`}{{}BBb}{{}BBd}{{}BBf}{{}BBh}{{}BBj}{{}BBl}{{}BBn}{{}BC`}{{}BCb}{{}BCd}{{}BCf}{{}BCh}{{}BCj}{{}BCl}{{}BCn}{{}BD`}{{}BDb}{{}BDd}{{}BDf}{Mnc{}}{ANfc{}}{ANlc{}}{ANnc{}}{AObc{}}{AOdc{}}{AOfc{}}{AOhc{}}{B`c{}}{Bhc{}}{Bnc{}}{BA`c{}}{BAfc{}}{BAhc{}}{BB`c{}}{BBdc{}}{BBhc{}}{BBjc{}}{BBnc{}}{BChc{}}{BClc{}}{BD`c{}}{Mnc{}}{ANfc{}}{ANlc{}}{ANnc{}}{AObc{}}{AOdc{}}{AOfc{}}{AOhc{}}{B`c{}}{Bhc{}}{Bnc{}}{BA`c{}}{BAfc{}}{BAhc{}}{BB`c{}}{BBdc{}}{BBhc{}}{BBjc{}}{BBnc{}}{BChc{}}{BClc{}}{BD`c{}}{cc{}}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{ce{}{}}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{ACb{{l{Mn}}}}{ACb{{l{AHh}}}}{ACb{{l{AHj}}}}{ACb{{l{AHl}}}}{ACb{{l{AHn}}}}{ACb{{l{AI`}}}}{ACb{{l{AIb}}}}{ACb{{l{AId}}}}{ACb{{l{AIf}}}}{ACb{{l{AIh}}}}{ACb{{l{AIj}}}}{ACb{{l{Ml}}}}{ACb{{l{AIl}}}}{ACb{{l{AIn}}}}{ACb{{l{AJ`}}}}{ACb{{l{AJb}}}}{ACb{{l{AJd}}}}{ACb{{l{Nf}}}}{ACb{{l{AJf}}}}{ACb{{l{AJh}}}}{ACb{{l{AJj}}}}{ACb{{l{AJl}}}}{ACb{{l{AJn}}}}{ACb{{l{AK`}}}}{ACb{{l{AKb}}}}{ACb{{l{AKd}}}}{ACb{{l{AKf}}}}{ACb{{l{AKh}}}}{ACb{{l{AKj}}}}{ACb{{l{AKl}}}}{ACb{{l{AKn}}}}{ACb{{l{AL`}}}}{ACb{{l{ALb}}}}{ACb{{l{ALd}}}}{ACb{{l{ALf}}}}{ACb{{l{ALh}}}}{ACb{{l{N`}}}}{ACb{{l{Nb}}}}{ACb{{l{ALj}}}}{ACb{{l{ALl}}}}{ACb{{l{Nd}}}}{ACb{{l{ALn}}}}{ACb{{l{AM`}}}}{ACb{{l{AMb}}}}{ACb{{l{AMd}}}}{ACb{{l{AMf}}}}{ACb{{l{AMh}}}}{ACb{{l{AMj}}}}{ACb{{l{AMl}}}}{ACb{{l{AMn}}}}{ACb{{l{AN`}}}}{ACb{{l{ANb}}}}{ACb{{l{ANd}}}}{ACb{{l{ANf}}}}{ACb{{l{ANh}}}}{ACb{{l{ANj}}}}{ACb{{l{ANl}}}}{ACb{{l{ANn}}}}{ACb{{l{AO`}}}}{ACb{{l{AOb}}}}{ACb{{l{AOd}}}}{ACb{{l{AOf}}}}{ACb{{l{AOh}}}}{ACb{{l{AOj}}}}{ACb{{l{AOl}}}}{ACb{{l{AOn}}}}{ACb{{l{B`}}}}{ACb{{l{Bb}}}}{ACb{{l{Bd}}}}{ACb{{l{Bf}}}}{ACb{{l{Bh}}}}{ACb{{l{Bj}}}}{ACb{{l{Bl}}}}{ACb{{l{Bn}}}}{ACb{{l{BA`}}}}{ACb{{l{BAb}}}}{ACb{{l{BAd}}}}{ACb{{l{BAf}}}}{ACb{{l{BAh}}}}{ACb{{l{BAj}}}}{ACb{{l{BAl}}}}{ACb{{l{BAn}}}}{ACb{{l{BB`}}}}{ACb{{l{BBb}}}}{ACb{{l{BBd}}}}{ACb{{l{BBf}}}}{ACb{{l{BBh}}}}{ACb{{l{BBj}}}}{ACb{{l{BBl}}}}{ACb{{l{BBn}}}}{ACb{{l{BC`}}}}{ACb{{l{BCb}}}}{ACb{{l{BCd}}}}{ACb{{l{BCf}}}}{ACb{{l{BCh}}}}{ACb{{l{BCj}}}}{ACb{{l{BCl}}}}{ACb{{l{BCn}}}}{ACb{{l{BD`}}}}{cABd{}}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000```````````````````````````````````````````````````````````````````````````````````````````````````````{{AHfACdc}Lj{{AFn{ACd}}}}{{BDbACdc}Lj{{AFn{ACd}}}}{{BDdACdc}Lj{{AFn{ACd}}}}{{BDfACdc}Lj{{AFn{ACd}}}}{ce{}{}}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{{MnACd}Lj}{{AHhACd}Lj}{{AHjACd}Lj}{{AHlACd}Lj}{{AHnACd}Lj}{{AI`ACd}Lj}{{AIbACd}Lj}{{AIdACd}Lj}{{AIfACd}Lj}{{AIhACd}Lj}{{AIjACd}Lj}{{MlACd}Lj}{{AIlACd}Lj}{{AInACd}Lj}{{AJ`ACd}Lj}{{AJbACd}Lj}{{AJdACd}Lj}{{NfACd}Lj}{{AJfACd}Lj}{{AJhACd}Lj}{{AJjACd}Lj}{{AJlACd}Lj}{{AJnACd}Lj}{{AK`ACd}Lj}{{AKbACd}Lj}{{AKdACd}Lj}{{AKfACd}Lj}{{AKhACd}Lj}{{AKjACd}Lj}{{AKlACd}Lj}{{AKnACd}Lj}{{AL`ACd}Lj}{{ALbACd}Lj}{{ALdACd}Lj}{{ALfACd}Lj}{{ALhACd}Lj}{{N`ACd}Lj}{{NbACd}Lj}{{ALjACd}Lj}{{ALlACd}Lj}{{NdACd}Lj}{{ALnACd}Lj}{{AM`ACd}Lj}{{AMbACd}Lj}{{AMdACd}Lj}{{AMfACd}Lj}{{AMhACd}Lj}{{AMjACd}Lj}{{AMlACd}Lj}{{AMnACd}Lj}{{AN`ACd}Lj}{{ANbACd}Lj}{{ANdACd}Lj}{{ANfACd}Lj}{{ANhACd}Lj}{{ANjACd}Lj}{{ANlACd}Lj}{{ANnACd}Lj}{{AO`ACd}Lj}{{AObACd}Lj}{{AOdACd}Lj}{{AOfACd}Lj}{{AOhACd}Lj}{{AOjACd}Lj}{{AOlACd}Lj}{{AOnACd}Lj}{{B`ACd}Lj}{{BbACd}Lj}{{BdACd}Lj}{{BfACd}Lj}{{BhACd}Lj}{{BjACd}Lj}{{BlACd}Lj}{{BnACd}Lj}{{BA`ACd}Lj}{{BAbACd}Lj}{{BAdACd}Lj}{{BAfACd}Lj}{{BAhACd}Lj}{{BAjACd}Lj}{{BAlACd}Lj}{{BAnACd}Lj}{{BB`ACd}Lj}{{BBbACd}Lj}{{BBdACd}Lj}{{BBfACd}Lj}{{BBhACd}Lj}{{BBjACd}Lj}{{BBlACd}Lj}{{BBnACd}Lj}{{BC`ACd}Lj}{{BCbACd}Lj}{{BCdACd}Lj}{{BCfACd}Lj}{{BChACd}Lj}{{BCjACd}Lj}{{BClACd}Lj}{{BCnACd}Lj}{{BD`ACd}Lj}{c{{Mh{e}}}{}{}}0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{cADf{}}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","c":[],"p":[[5,"TypeGenerics",0],[5,"Turbofish",0],[5,"LitInt",0],[1,"str"],[5,"LitFloat",0],[8,"Result",2203],[10,"FromStr",4159],[5,"Ident",0],[5,"ImplGenerics",0],[5,"Lifetime",0],[5,"Attribute",0],[6,"AttrStyle",0],[6,"Meta",0],[5,"MetaList",0],[5,"MetaNameValue",0],[5,"Variant",0],[6,"Fields",0],[5,"FieldsNamed",0],[5,"FieldsUnnamed",0],[5,"Field",0],[5,"DeriveInput",0],[6,"Data",0],[5,"DataStruct",0],[5,"DataEnum",0],[5,"DataUnion",0],[6,"Expr",0],[5,"ExprBinary",0],[5,"ExprCall",0],[5,"ExprCast",0],[5,"ExprField",0],[5,"ExprGroup",0],[5,"ExprIndex",0],[5,"ExprLit",0],[5,"ExprMacro",0],[5,"ExprMethodCall",0],[5,"ExprParen",0],[5,"ExprPath",0],[5,"ExprReference",0],[5,"ExprStruct",0],[5,"ExprTuple",0],[5,"ExprUnary",0],[6,"Member",0],[5,"Index",0],[5,"FieldValue",0],[5,"Generics",0],[6,"GenericParam",0],[5,"LifetimeParam",0],[5,"TypeParam",0],[5,"ConstParam",0],[5,"BoundLifetimes",0],[6,"TypeParamBound",0],[5,"TraitBound",0],[6,"TraitBoundModifier",0],[5,"WhereClause",0],[6,"WherePredicate",0],[5,"PredicateLifetime",0],[5,"PredicateType",0],[6,"Lit",0],[5,"LitStr",0],[5,"LitByteStr",0],[5,"LitCStr",0],[5,"LitByte",0],[5,"LitChar",0],[5,"LitBool",0],[5,"Macro",0],[6,"MacroDelimiter",0],[6,"BinOp",0],[6,"UnOp",0],[5,"Path",0],[5,"PathSegment",0],[6,"PathArguments",0],[6,"GenericArgument",0],[5,"AngleBracketedGenericArguments",0],[5,"AssocType",0],[5,"AssocConst",0],[5,"Constraint",0],[5,"ParenthesizedGenericArguments",0],[5,"QSelf",0],[6,"Visibility",0],[5,"VisRestricted",0],[6,"FieldMutability",0],[6,"Type",0],[5,"TypeArray",0],[5,"TypeBareFn",0],[5,"TypeGroup",0],[5,"TypeImplTrait",0],[5,"TypeInfer",0],[5,"TypeMacro",0],[5,"TypeNever",0],[5,"TypeParen",0],[5,"TypePath",0],[5,"TypePtr",0],[5,"TypeReference",0],[5,"TypeSlice",0],[5,"TypeTraitObject",0],[5,"TypeTuple",0],[5,"Abi",0],[5,"BareFnArg",0],[5,"BareVariadic",0],[6,"ReturnType",0],[1,"unit"],[6,"Ordering",4160],[1,"bool"],[10,"AsRef",4161],[10,"Sized",4162],[5,"Formatter",4163],[5,"Error",4163],[6,"Result",4164],[8,"Result",4163],[5,"Crate",2474],[5,"Underscore",2474],[5,"SelfType",2474],[5,"SelfValue",2474],[5,"Super",2474],[5,"Extern",2474],[5,"ExprLoop",0],[5,"ExprContinue",0],[5,"ExprMatch",0],[5,"ExprRange",0],[5,"ExprRepeat",0],[5,"ExprClosure",0],[5,"ExprIf",0],[5,"ExprTryBlock",0],[5,"ExprWhile",0],[5,"ExprAssign",0],[5,"ExprConst",0],[5,"ExprYield",0],[5,"ExprReturn",0],[5,"ExprUnsafe",0],[5,"ExprArray",0],[5,"ExprBreak",0],[5,"ExprAwait",0],[5,"ExprBlock",0],[5,"ExprTry",0],[5,"ExprInfer",0],[5,"ExprAsync",0],[5,"ExprForLoop",0],[5,"ExprLet",0],[1,"usize"],[5,"Literal",4165],[10,"Into",4161],[6,"Option",4166],[10,"Hasher",4167],[5,"Iter",2308],[5,"IterMut",2308],[5,"Span",4165],[1,"u8"],[1,"slice"],[5,"CStr",4168],[1,"char"],[5,"TokenStream",4169],[10,"Parse",2203],[8,"ParseStream",2203],[5,"TokenStream",4165],[10,"Parser",2203],[5,"Vec",4170],[5,"ParseNestedMeta",2189],[17,"Output"],[10,"FnMut",4171],[5,"DelimSpan",4172],[1,"tuple"],[5,"String",4173],[5,"TypeId",4174],[5,"CString",4175],[5,"TokenBuffer",2151],[5,"Cursor",2151],[6,"Delimiter",4165],[5,"Punct",4165],[6,"TokenTree",4165],[10,"IdentExt",2185],[5,"Error",2203],[10,"Display",4163],[5,"ParseBuffer",2203],[5,"StepCursor",2203],[5,"Nothing",2203],[5,"Lookahead1",2203],[17,"Item"],[10,"IntoIterator",4176],[5,"LexError",4165],[10,"ToTokens",4177],[5,"Punctuated",2308],[10,"Peek",2203],[10,"FnOnce",4171],[10,"Speculative",2304],[10,"AnyDelimiter",2304],[10,"Clone",4178],[5,"Pairs",2308],[5,"IntoPairs",2308],[5,"IntoIter",2308],[6,"Pair",2308],[10,"Default",4179],[5,"PairsMut",2308],[10,"Token",2474],[10,"Spanned",2472],[5,"Group",2474],[5,"Abstract",2474],[5,"As",2474],[5,"Async",2474],[5,"Auto",2474],[5,"Await",2474],[5,"Become",2474],[5,"Box",2474],[5,"Break",2474],[5,"Const",2474],[5,"Continue",2474],[5,"Default",2474],[5,"Do",2474],[5,"Dyn",2474],[5,"Else",2474],[5,"Enum",2474],[5,"Final",2474],[5,"Fn",2474],[5,"For",2474],[5,"If",2474],[5,"Impl",2474],[5,"In",2474],[5,"Let",2474],[5,"Loop",2474],[5,"Macro",2474],[5,"Match",2474],[5,"Mod",2474],[5,"Move",2474],[5,"Mut",2474],[5,"Override",2474],[5,"Priv",2474],[5,"Pub",2474],[5,"Ref",2474],[5,"Return",2474],[5,"Static",2474],[5,"Struct",2474],[5,"Trait",2474],[5,"Try",2474],[5,"Type",2474],[5,"Typeof",2474],[5,"Union",2474],[5,"Unsafe",2474],[5,"Unsized",2474],[5,"Use",2474],[5,"Virtual",2474],[5,"Where",2474],[5,"While",2474],[5,"Yield",2474],[5,"And",2474],[5,"AndAnd",2474],[5,"AndEq",2474],[5,"At",2474],[5,"Caret",2474],[5,"CaretEq",2474],[5,"Colon",2474],[5,"Comma",2474],[5,"Dollar",2474],[5,"Dot",2474],[5,"DotDot",2474],[5,"DotDotDot",2474],[5,"DotDotEq",2474],[5,"Eq",2474],[5,"EqEq",2474],[5,"FatArrow",2474],[5,"Ge",2474],[5,"Gt",2474],[5,"LArrow",2474],[5,"Le",2474],[5,"Lt",2474],[5,"Minus",2474],[5,"MinusEq",2474],[5,"Ne",2474],[5,"Not",2474],[5,"Or",2474],[5,"OrEq",2474],[5,"OrOr",2474],[5,"PathSep",2474],[5,"Percent",2474],[5,"PercentEq",2474],[5,"Plus",2474],[5,"PlusEq",2474],[5,"Pound",2474],[5,"Question",2474],[5,"RArrow",2474],[5,"Semi",2474],[5,"Shl",2474],[5,"ShlEq",2474],[5,"Shr",2474],[5,"ShrEq",2474],[5,"Slash",2474],[5,"SlashEq",2474],[5,"Star",2474],[5,"StarEq",2474],[5,"Tilde",2474],[5,"Brace",2474],[5,"Bracket",2474],[5,"Paren",2474]],"b":[[796,"impl-PartialEq-for-Ident"],[797,"impl-PartialEq%3CT%3E-for-Ident"],[819,"impl-Display-for-Ident"],[820,"impl-Debug-for-Ident"],[821,"impl-IdentFragment-for-Ident"],[829,"impl-From%3CCrate%3E-for-Ident"],[830,"impl-From%3CUnderscore%3E-for-Ident"],[831,"impl-From%3CSelfType%3E-for-Ident"],[832,"impl-From%3CSelfValue%3E-for-Ident"],[833,"impl-From%3CSuper%3E-for-Ident"],[835,"impl-From%3CExtern%3E-for-Ident"],[842,"impl-From%3CMetaNameValue%3E-for-Meta"],[844,"impl-From%3CMetaList%3E-for-Meta"],[845,"impl-From%3CPath%3E-for-Meta"],[849,"impl-From%3CFieldsUnnamed%3E-for-Fields"],[850,"impl-From%3CFieldsNamed%3E-for-Fields"],[860,"impl-From%3CExprLoop%3E-for-Expr"],[861,"impl-From%3CExprBinary%3E-for-Expr"],[862,"impl-From%3CExprContinue%3E-for-Expr"],[863,"impl-From%3CExprTuple%3E-for-Expr"],[864,"impl-From%3CExprMatch%3E-for-Expr"],[865,"impl-From%3CExprRange%3E-for-Expr"],[866,"impl-From%3CExprRepeat%3E-for-Expr"],[867,"impl-From%3CExprClosure%3E-for-Expr"],[868,"impl-From%3CExprStruct%3E-for-Expr"],[869,"impl-From%3CExprIf%3E-for-Expr"],[870,"impl-From%3CExprUnary%3E-for-Expr"],[871,"impl-From%3CExprField%3E-for-Expr"],[872,"impl-From%3CExprPath%3E-for-Expr"],[873,"impl-From%3CExprTryBlock%3E-for-Expr"],[874,"impl-From%3CExprMethodCall%3E-for-Expr"],[875,"impl-From%3CExprWhile%3E-for-Expr"],[876,"impl-From%3CExprAssign%3E-for-Expr"],[877,"impl-From%3CExprGroup%3E-for-Expr"],[878,"impl-From%3CExprConst%3E-for-Expr"],[879,"impl-From%3CExprCast%3E-for-Expr"],[881,"impl-From%3CExprYield%3E-for-Expr"],[882,"impl-From%3CExprReference%3E-for-Expr"],[883,"impl-From%3CExprReturn%3E-for-Expr"],[884,"impl-From%3CExprUnsafe%3E-for-Expr"],[885,"impl-From%3CExprArray%3E-for-Expr"],[886,"impl-From%3CExprCall%3E-for-Expr"],[887,"impl-From%3CExprBreak%3E-for-Expr"],[888,"impl-From%3CExprIndex%3E-for-Expr"],[889,"impl-From%3CExprAwait%3E-for-Expr"],[890,"impl-From%3CExprBlock%3E-for-Expr"],[891,"impl-From%3CExprTry%3E-for-Expr"],[892,"impl-From%3CExprInfer%3E-for-Expr"],[893,"impl-From%3CExprLit%3E-for-Expr"],[894,"impl-From%3CExprParen%3E-for-Expr"],[895,"impl-From%3CExprMacro%3E-for-Expr"],[896,"impl-From%3CExprAsync%3E-for-Expr"],[897,"impl-From%3CExprForLoop%3E-for-Expr"],[898,"impl-From%3CExprLet%3E-for-Expr"],[937,"impl-From%3CIdent%3E-for-Member"],[938,"impl-From%3CIndex%3E-for-Member"],[939,"impl-From%3Cusize%3E-for-Member"],[945,"impl-From%3CConstParam%3E-for-GenericParam"],[947,"impl-From%3CLifetimeParam%3E-for-GenericParam"],[948,"impl-From%3CTypeParam%3E-for-GenericParam"],[954,"impl-From%3CLifetime%3E-for-TypeParamBound"],[955,"impl-From%3CTraitBound%3E-for-TypeParamBound"],[960,"impl-From%3CPredicateType%3E-for-WherePredicate"],[961,"impl-From%3CPredicateLifetime%3E-for-WherePredicate"],[966,"impl-From%3CLitCStr%3E-for-Lit"],[967,"impl-From%3CLitByte%3E-for-Lit"],[968,"impl-From%3CLitByteStr%3E-for-Lit"],[969,"impl-From%3CLitBool%3E-for-Lit"],[970,"impl-From%3CLitFloat%3E-for-Lit"],[971,"impl-From%3CLitChar%3E-for-Lit"],[972,"impl-From%3CLitInt%3E-for-Lit"],[973,"impl-From%3CLitStr%3E-for-Lit"],[1003,"impl-From%3CTypeArray%3E-for-Type"],[1004,"impl-From%3CTypeSlice%3E-for-Type"],[1005,"impl-From%3CTypeMacro%3E-for-Type"],[1007,"impl-From%3CTypePtr%3E-for-Type"],[1008,"impl-From%3CTypeInfer%3E-for-Type"],[1009,"impl-From%3CTypeParen%3E-for-Type"],[1010,"impl-From%3CTypeNever%3E-for-Type"],[1011,"impl-From%3CTypeImplTrait%3E-for-Type"],[1012,"impl-From%3CTypeReference%3E-for-Type"],[1013,"impl-From%3CTypePath%3E-for-Type"],[1014,"impl-From%3CTypeTraitObject%3E-for-Type"],[1015,"impl-From%3CTypeBareFn%3E-for-Type"],[1016,"impl-From%3CTypeTuple%3E-for-Type"],[1017,"impl-From%3CTypeGroup%3E-for-Type"],[1188,"impl-IntoIterator-for-%26mut+Fields"],[1189,"impl-IntoIterator-for-%26Fields"],[1190,"impl-IntoIterator-for-Fields"],[1294,"impl-LitStr"],[1295,"impl-Parse-for-LitStr"],[1391,"impl-Ident"],[1392,"impl-IdentFragment-for-Ident"],[2243,"impl-Display-for-Error"],[2244,"impl-Debug-for-Error"],[2245,"impl-Display-for-ParseBuffer%3C\'a%3E"],[2246,"impl-Debug-for-ParseBuffer%3C\'a%3E"],[2260,"impl-IntoIterator-for-Error"],[2261,"impl-IntoIterator-for-%26Error"],[2351,"impl-Extend%3CT%3E-for-Punctuated%3CT,+P%3E"],[2352,"impl-Extend%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[2363,"impl-FromIterator%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[2364,"impl-FromIterator%3CT%3E-for-Punctuated%3CT,+P%3E"],[2378,"impl-IntoIterator-for-%26Punctuated%3CT,+P%3E"],[2379,"impl-IntoIterator-for-Punctuated%3CT,+P%3E"],[2380,"impl-IntoIterator-for-%26mut+Punctuated%3CT,+P%3E"]]}],\
["unicode_ident",{"doc":"github crates-io docs-rs","t":"HH","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":"{bd}0","c":[],"p":[[1,"char"],[1,"bool"]],"b":[]}],\
["zerocopy",{"doc":"<em>Want to help improve zerocopy? Fill out our user survey!</em>","t":"KYKKKYKYFFKYNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMQQQNNNNNNNNNNNNNNIGKFFFFFFIGTTTTIIFFFFTTTTTTTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNNNNNMNNMNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNCNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNMNNMNNNMNNMNNNMNNMNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNMNNMNNNMNNMNNNMNNMNNMNNMNNIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII","n":["AsBytes","AsBytes","ByteSlice","ByteSliceMut","FromBytes","FromBytes","FromZeroes","FromZeroes","Ref","Unalign","Unaligned","Unaligned","as_bytes","as_bytes_mut","as_mut_ptr","as_ptr","borrow","borrow","borrow_mut","borrow_mut","byteorder","bytes","bytes_mut","clone","cmp","cmp","cmp","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut_unchecked","deref_unchecked","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","get","get_mut_ptr","get_ptr","hash","include_value","into","into","into_inner","into_mut","into_mut_slice","into_ref","into_slice","mut_from","mut_from_prefix","mut_from_suffix","mut_slice_from","mut_slice_from_prefix","mut_slice_from_suffix","new","new","new_from_prefix","new_from_prefix_zeroed","new_from_suffix","new_from_suffix_zeroed","new_slice","new_slice_from_prefix","new_slice_from_prefix_zeroed","new_slice_from_suffix","new_slice_from_suffix_zeroed","new_slice_unaligned","new_slice_unaligned_from_prefix","new_slice_unaligned_from_prefix_zeroed","new_slice_unaligned_from_suffix","new_slice_unaligned_from_suffix_zeroed","new_slice_unaligned_zeroed","new_slice_zeroed","new_unaligned","new_unaligned_from_prefix","new_unaligned_from_prefix_zeroed","new_unaligned_from_suffix","new_unaligned_from_suffix_zeroed","new_unaligned_zeroed","new_zeroed","new_zeroed","partial_cmp","partial_cmp","partial_cmp","read","read_from","read_from_prefix","read_from_suffix","ref_from","ref_from_prefix","ref_from_suffix","set","slice_from","slice_from_prefix","slice_from_suffix","split_at","transmute","transmute_mut","transmute_ref","try_deref","try_deref_mut","try_from","try_from","try_into","try_into","type_id","type_id","update","write","write_to","write_to_prefix","write_to_suffix","zero","BE","BigEndian","ByteOrder","F32","F64","I128","I16","I32","I64","LE","LittleEndian","MAX_VALUE","MAX_VALUE","MAX_VALUE","MAX_VALUE","NativeEndian","NetworkEndian","U128","U16","U32","U64","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","big_endian","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","default","default","default","default","default","default","default","default","default","default","default","default","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","get","get","get","get","get","get","get","get","get","get","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","little_endian","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","native_endian","neg","neg","neg","neg","neg","neg","network_endian","new","new","new","new","new","new","new","new","new","new","not","not","not","not","not","not","not","not","partial_cmp","partial_cmp","read_f32","read_f32_into","read_f32_into_unchecked","read_f64","read_f64_into","read_f64_into_unchecked","read_i128","read_i128_into","read_i16","read_i16_into","read_i24","read_i32","read_i32_into","read_i48","read_i64","read_i64_into","read_int","read_int128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","set","set","set","set","set","set","set","set","set","set","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_f32","write_f32_into","write_f64","write_f64_into","write_i128","write_i128_into","write_i16","write_i16_into","write_i24","write_i32","write_i32_into","write_i48","write_i64","write_i64_into","write_i8_into","write_int","write_int128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128","F32","F64","I128","I16","I32","I64","U128","U16","U32","U64","F32","F64","I128","I16","I32","I64","U128","U16","U32","U64","F32","F64","I128","I16","I32","I64","U128","U16","U32","U64","F32","F64","I128","I16","I32","I64","U128","U16","U32","U64"],"q":[[0,"zerocopy"],[123,"zerocopy::byteorder"],[792,"zerocopy::byteorder::big_endian"],[802,"zerocopy::byteorder::little_endian"],[812,"zerocopy::byteorder::native_endian"],[822,"zerocopy::byteorder::network_endian"],[832,"core::marker"],[833,"core::marker"],[834,"core::cmp"],[835,"core::cmp"],[836,"core::fmt"],[837,"core::hash"],[838,"core::cmp"],[839,"core::any"],[840,"core::ops::function"],[841,"core::clone"],[842,"core::fmt"]],"d":["Types that can be viewed as an immutable slice of …","Analyzes whether a type is <code>AsBytes</code>.","A mutable or immutable reference to a byte slice.","A mutable reference to a byte slice.","Types for which any bit pattern is valid.","Analyzes whether a type is <code>FromBytes</code>.","Types for which a sequence of bytes all set to zero …","Analyzes whether a type is <code>FromZeroes</code>.","A typed reference derived from a byte slice.","A type with no alignment requirement.","Types with no alignment requirement.","","Gets the bytes of this value.","Gets the bytes of this value mutably.","Gets a mutable raw pointer to the first byte in the slice.","Gets a raw pointer to the first byte in the slice.","","","","","Byte order-aware numeric primitives.","Gets the underlying bytes.","Gets the underlying bytes mutably.","","","","","","","","","","","","Returns a mutable reference to the wrapped <code>T</code> without …","Returns a reference to the wrapped <code>T</code> without checking …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets a copy of the inner <code>T</code>.","Gets an unaligned mutable raw pointer to the inner <code>T</code>.","Gets an unaligned raw pointer to the inner <code>T</code>.","","Includes a file and safely transmutes it to a value of an …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes <code>self</code>, returning the inner <code>T</code>.","Converts this <code>Ref</code> into a mutable reference.","Converts this <code>Ref</code> into a mutable slice reference.","Converts this <code>Ref</code> into a reference.","Converts this <code>Ref</code> into a slice reference.","Interprets the given <code>bytes</code> as a <code>&amp;mut Self</code> without copying.","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;mut Self</code> …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;mut Self</code> …","Interprets the given <code>bytes</code> as a <code>&amp;mut [Self]</code> without …","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;mut [Self]</code> …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;mut [Self]</code> …","Constructs a new <code>Ref</code>.","Constructs a new <code>Unalign</code>.","Constructs a new <code>Ref</code> from the prefix of a byte slice.","Constructs a new <code>Ref</code> from the prefix of a byte slice, …","Constructs a new <code>Ref</code> from the suffix of a byte slice.","Constructs a new <code>Ref</code> from the suffix of a byte slice, …","Constructs a new <code>Ref</code> of a slice type.","Constructs a new <code>Ref</code> of a slice type from the prefix of a …","Constructs a new <code>Ref</code> of a slice type from the prefix of a …","Constructs a new <code>Ref</code> of a slice type from the suffix of a …","Constructs a new <code>Ref</code> of a slice type from the prefix of a …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> for a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type after zeroing the …","Constructs a new <code>Ref</code> for a type with no alignment …","Constructs a new <code>Ref</code> from the prefix of a byte slice for a …","Constructs a new <code>Ref</code> from the prefix of a byte slice for a …","Constructs a new <code>Ref</code> from the suffix of a byte slice for a …","Constructs a new <code>Ref</code> from the suffix of a byte slice for a …","Constructs a new <code>Ref</code> for a type with no alignment …","Creates an instance of <code>Self</code> from zeroed bytes.","Constructs a new <code>Ref</code> after zeroing the bytes.","","","","Reads a copy of <code>T</code>.","Reads a copy of <code>Self</code> from <code>bytes</code>.","Reads a copy of <code>Self</code> from the prefix of <code>bytes</code>.","Reads a copy of <code>Self</code> from the suffix of <code>bytes</code>.","Interprets the given <code>bytes</code> as a <code>&amp;Self</code> without copying.","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;Self</code> …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;Self</code> …","Sets the inner <code>T</code>, dropping the previous value.","Interprets the given <code>bytes</code> as a <code>&amp;[Self]</code> without copying.","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;[Self]</code> with …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;[Self]</code> with …","Splits the slice at the midpoint.","Safely transmutes a value of one type to a value of …","Safely transmutes a mutable reference of one type to an …","Safely transmutes a mutable or immutable reference of one …","Attempts to return a reference to the wrapped <code>T</code>, failing …","Attempts to return a mutable reference to the wrapped <code>T</code>, …","","","","","","","Updates the inner <code>T</code> by calling a function on it.","Writes the bytes of <code>t</code> and then forgets <code>t</code>.","Writes a copy of <code>self</code> to <code>bytes</code>.","Writes a copy of <code>self</code> to the prefix of <code>bytes</code>.","Writes a copy of <code>self</code> to the suffix of <code>bytes</code>.","Overwrites <code>self</code> with zeroes.","A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A 32-bit floating point number stored in a given byte …","A 64-bit floating point number stored in a given byte …","A 128-bit signed integer stored in a given byte order.","A 16-bit signed integer stored in a given byte order.","A 32-bit signed integer stored in a given byte order.","A 64-bit signed integer stored in a given byte order.","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","The maximum value.","The maximum value.","The maximum value.","The maximum value.","Defines system native-endian serialization.","Defines network byte order serialization.","A 128-bit unsigned integer stored in a given byte order.","A 16-bit unsigned integer stored in a given byte order.","A 32-bit unsigned integer stored in a given byte order.","A 64-bit unsigned integer stored in a given byte order.","The value zero.","The value zero.","The value zero.","The value zero.","The value zero.","The value zero.","The value zero.","The value zero.","The value zero.","The value zero.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Numeric primitives stored in big-endian byte ordereturns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Constructs a new value from bytes which are already in the …","Constructs a new value from bytes which are already in the …","Constructs a new value from bytes which are already in the …","Constructs a new value from bytes which are already in the …","Constructs a new value from bytes which are already in the …","Constructs a new value from bytes which are already in the …","Constructs a new value from bytes which are already in the …","Constructs a new value from bytes which are already in the …","Constructs a new value from bytes which are already in the …","Constructs a new value from bytes which are already in the …","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Numeric primitives stored in little-endian byte order.","","","","","","","","","","","","","","","","","","","","","Numeric primitives stored in native-endian byte order.","","","","","","","Numeric primitives stored in network-endian byte order.","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","","","","","","","","","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 16 bit integer from <code>buf</code>.","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","","","","","","","","","","","","","","","","","","","","","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","A 32-bit floating point number stored in big-endian byte …","A 64-bit floating point number stored in big-endian byte …","A 128-bit signed integer stored in big-endian byte order.","A 16-bit signed integer stored in big-endian byte order.","A 32-bit signed integer stored in big-endian byte order.","A 64-bit signed integer stored in big-endian byte order.","A 128-bit unsigned integer stored in big-endian byte order.","A 16-bit unsigned integer stored in big-endian byte order.","A 32-bit unsigned integer stored in big-endian byte order.","A 64-bit unsigned integer stored in big-endian byte order.","A 32-bit floating point number stored in little-endian …","A 64-bit floating point number stored in little-endian …","A 128-bit signed integer stored in little-endian byte …","A 16-bit signed integer stored in little-endian byte order.","A 32-bit signed integer stored in little-endian byte order.","A 64-bit signed integer stored in little-endian byte order.","A 128-bit unsigned integer stored in little-endian byte …","A 16-bit unsigned integer stored in little-endian byte …","A 32-bit unsigned integer stored in little-endian byte …","A 64-bit unsigned integer stored in little-endian byte …","A 32-bit floating point number stored in native-endian …","A 64-bit floating point number stored in native-endian …","A 128-bit signed integer stored in native-endian byte …","A 16-bit signed integer stored in native-endian byte order.","A 32-bit signed integer stored in native-endian byte order.","A 64-bit signed integer stored in native-endian byte order.","A 128-bit unsigned integer stored in native-endian byte …","A 16-bit unsigned integer stored in native-endian byte …","A 32-bit unsigned integer stored in native-endian byte …","A 64-bit unsigned integer stored in native-endian byte …","A 32-bit floating point number stored in network-endian …","A 64-bit floating point number stored in network-endian …","A 128-bit signed integer stored in network-endian byte …","A 16-bit signed integer stored in network-endian byte …","A 32-bit signed integer stored in network-endian byte …","A 64-bit signed integer stored in network-endian byte …","A 128-bit unsigned integer stored in network-endian byte …","A 16-bit unsigned integer stored in network-endian byte …","A 32-bit unsigned integer stored in network-endian byte …","A 64-bit unsigned integer stored in network-endian byte …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,1,1,4,5,6,8,6,8,0,6,6,8,6,6,8,8,6,6,8,6,6,8,8,8,6,6,8,6,6,6,6,8,8,6,8,8,8,8,8,0,6,8,8,6,6,6,6,11,11,11,11,11,11,6,8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,27,6,6,6,8,6,11,11,11,11,11,11,8,11,11,11,5,0,0,0,8,8,6,8,6,8,6,8,8,6,1,1,1,27,0,0,0,0,0,0,0,0,0,0,0,33,35,36,37,0,0,0,0,0,0,33,35,36,37,38,39,40,41,42,43,33,35,36,37,38,39,40,41,42,43,33,35,36,37,38,39,40,41,42,43,33,35,36,37,38,39,40,41,42,43,33,35,36,37,38,39,40,41,42,43,0,33,35,36,37,38,39,40,41,33,35,36,37,38,39,40,41,33,35,36,37,38,39,40,41,33,35,36,37,38,39,40,41,33,35,36,37,38,39,40,41,33,35,36,37,38,39,40,41,45,46,33,35,36,37,38,39,40,41,42,43,45,46,33,35,36,37,38,39,40,41,42,43,45,46,33,35,36,37,38,39,40,41,42,43,45,46,45,46,33,35,36,37,38,39,40,41,42,43,33,35,36,37,38,39,40,41,42,43,33,35,36,37,38,39,40,41,42,43,45,46,33,33,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,45,46,33,33,33,33,33,33,35,35,35,35,35,35,36,36,36,36,36,36,37,37,37,37,37,37,38,38,38,38,38,38,39,39,39,39,39,39,40,40,40,40,40,40,41,41,41,41,41,41,42,42,43,43,45,46,33,33,33,35,35,35,35,36,36,36,36,36,37,37,37,37,37,37,38,38,38,39,39,39,39,40,40,40,40,40,41,41,41,41,41,41,42,42,42,43,43,43,43,33,35,36,37,38,39,40,41,42,43,34,45,46,34,45,46,34,34,34,34,34,45,46,34,45,46,34,45,46,34,45,46,33,35,36,37,38,39,40,41,42,43,45,46,33,35,36,37,38,39,40,41,42,43,45,46,33,35,36,37,38,39,40,41,42,43,0,33,35,36,37,38,39,40,41,42,43,33,35,36,37,38,39,40,41,42,43,0,38,39,40,41,42,43,0,33,35,36,37,38,39,40,41,42,43,33,35,36,37,38,39,40,41,45,46,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,45,46,34,45,46,34,45,46,34,45,46,34,34,45,46,34,45,46,34,34,45,46,34,45,46,34,45,46,34,45,46,33,35,36,37,38,39,40,41,42,43,33,35,36,37,38,39,40,41,42,43,33,35,36,37,38,39,40,41,42,43,33,35,36,37,38,39,40,41,33,35,36,37,38,39,40,41,33,35,36,37,38,39,40,41,33,35,36,37,38,39,40,41,33,35,36,37,38,39,40,41,42,43,33,35,36,37,38,39,40,41,42,43,45,46,33,33,33,33,33,33,33,33,35,35,35,35,35,36,36,36,37,38,38,38,38,38,38,38,38,39,39,39,39,39,40,40,40,41,42,43,45,46,33,35,36,37,38,39,40,41,42,43,45,46,33,35,36,37,38,39,40,41,42,43,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,45,46,34,45,46,34,45,46,34,45,46,34,34,45,46,34,45,46,34,34,45,46,34,45,46,34,45,46,34,45,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"````````````{b{{f{d}}}}0{hd}{jd}{ce{}{}}000`{{{l{ce}}}{{f{d}}}jn}{{{l{ce}}}{{f{d}}}hn}{{{A`{c}}}{{A`{c}}}Ab}{{{l{ce}}{l{ce}}}Adj{AfAh}}{{{l{c{f{e}}}}{l{c{f{e}}}}}Adj{AfAh}}{{{A`{c}}{A`{c}}}Ad{AjAh}}{{}{{A`{c}}}Al}{{{l{c{f{e}}}}}{{f{e}}}jAf}{{{l{ce}}}ejAf}{{{A`{c}}}cAj}{{{l{ce}}}eh{Afb}}{{{l{c{f{e}}}}}{{f{e}}}h{Afb}}2{{{A`{c}}}c{}}0{{{l{c{f{e}}}}{l{c{f{e}}}}}Anj{AfB`}}{{{l{ce}}{l{ce}}}Anj{AfB`}}{{{A`{c}}{A`{c}}}An{AjB`}}{{{l{ce}}Bb}Bdj{AfBf}}{{{l{c{f{e}}}}Bb}BdjAf}{{{l{c{f{e}}}}Bb}Bdj{AfBh}}{{{l{ce}}Bb}Bdj{AfBh}}{{{A`{c}}Bb}Bd{AjBf}}{{{A`{c}}Bb}Bd{AjBh}}{cc{}}0{{{A`{c}}}cAb}{{{A`{c}}}{}{}}0{{{A`{c}}e}Bj{AjBl}Bn}`{ce{}{}}0>{{{l{ce}}}eh{Afb}}{{{l{c{f{e}}}}}{{f{e}}}h{Afb}}{{{l{ce}}}ejAf}{{{l{c{f{e}}}}}{{f{e}}}jAf}{{{f{d}}}{{C`{Af}}}}00{{{f{d}}}{{C`{{f{Af}}}}}}{{{f{d}}Cb}{{C`{{Cd{{f{Af}}{f{d}}}}}}}}{{{f{d}}Cb}{{C`{{Cd{{f{d}}{f{Af}}}}}}}}{c{{C`{{l{ce}}}}}j{}}{c{{A`{c}}}{}}{c{{C`{{Cd{{l{ce}}c}}}}}j{}}{c{{C`{{Cd{{l{ce}}c}}}}}h{}}{c{{C`{{Cd{c{l{ce}}}}}}}j{}}{c{{C`{{Cd{c{l{ce}}}}}}}h{}}{c{{C`{{l{c{f{e}}}}}}}j{}}{{cCb}{{C`{{Cd{{l{c{f{e}}}}c}}}}}j{}}{{cCb}{{C`{{Cd{{l{c{f{e}}}}c}}}}}h{}}{{cCb}{{C`{{Cd{c{l{c{f{e}}}}}}}}}j{}}{{cCb}{{C`{{Cd{c{l{c{f{e}}}}}}}}}h{}}{c{{C`{{l{c{f{e}}}}}}}jAj}{{cCb}{{C`{{Cd{{l{c{f{e}}}}c}}}}}jAj}{{cCb}{{C`{{Cd{{l{c{f{e}}}}c}}}}}hAj}{{cCb}{{C`{{Cd{c{l{c{f{e}}}}}}}}}jAj}{{cCb}{{C`{{Cd{c{l{c{f{e}}}}}}}}}hAj}{c{{C`{{l{c{f{e}}}}}}}hAj}{c{{C`{{l{c{f{e}}}}}}}h{}}{c{{C`{{l{ce}}}}}jAj}{c{{C`{{Cd{{l{ce}}c}}}}}jAj}{c{{C`{{Cd{{l{ce}}c}}}}}hAj}{c{{C`{{Cd{c{l{ce}}}}}}}jAj}{c{{C`{{Cd{c{l{ce}}}}}}}hAj}{c{{C`{{l{ce}}}}}hAj}{{}Cf}{c{{C`{{l{ce}}}}}h{}}{{{l{ce}}{l{ce}}}{{C`{Ad}}}j{AfCh}}{{{l{c{f{e}}}}{l{c{f{e}}}}}{{C`{Ad}}}j{AfCh}}{{{A`{c}}{A`{c}}}{{C`{Ad}}}{AjCh}}{{{l{ce}}}ejAf}{{{f{d}}}{{C`{Af}}}}00000{{{A`{c}}c}Bj{}}{{{f{d}}}{{C`{{f{Af}}}}}}{{{f{d}}Cb}{{C`{{Cd{{f{Af}}{f{d}}}}}}}}{{{f{d}}Cb}{{C`{{Cd{{f{d}}{f{Af}}}}}}}}{{jCb}{{Cd{jj}}}}```{{{A`{c}}}{{C`{c}}}{}}0{c{{Cj{e}}}{}{}}000{cCl{}}0{{{A`{c}}g}e{}{}{{D`{c}{{Cn{e}}}}}}{{{l{ce}}e}Bjhb}{{b{f{d}}}{{C`{Bj}}}}00{CfBj}```````````````````````````````{{{Db{c}}{Db{c}}}{{Db{c}}}Dd}{{{Df{c}}{Df{c}}}{{Df{c}}}Dd}{{{Dh{c}}{Dh{c}}}{{Dh{c}}}Dd}{{{Dj{c}}{Dj{c}}}{{Dj{c}}}Dd}{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dd}{{{Dn{c}}{Dn{c}}}{{Dn{c}}}Dd}{{{E`{c}}{E`{c}}}{{E`{c}}}Dd}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dd}{{{Ed{c}}{Ed{c}}}{{Ed{c}}}Dd}{{{Ef{c}}{Ef{c}}}{{Ef{c}}}Dd}{{{Db{c}}{Db{c}}}BjDd}{{{Df{c}}{Df{c}}}BjDd}{{{Dh{c}}{Dh{c}}}BjDd}{{{Dj{c}}{Dj{c}}}BjDd}{{{Dl{c}}{Dl{c}}}BjDd}{{{Dn{c}}{Dn{c}}}BjDd}{{{E`{c}}{E`{c}}}BjDd}{{{Eb{c}}{Eb{c}}}BjDd}{{{Ed{c}}{Ed{c}}}BjDd}{{{Ef{c}}{Ef{c}}}BjDd}{{{Db{c}}}{{Eh{d}}}Dd}{{{Df{c}}}{{Eh{d}}}Dd}{{{Dh{c}}}{{Eh{d}}}Dd}{{{Dj{c}}}{{Eh{d}}}Dd}{{{Dl{c}}}{{Eh{d}}}Dd}{{{Dn{c}}}{{Eh{d}}}Dd}{{{E`{c}}}{{Eh{d}}}Dd}{{{Eb{c}}}{{Eh{d}}}Dd}{{{Ed{c}}}{{Eh{d}}}Dd}{{{Ef{c}}}{{Eh{d}}}Dd}9876543210`{{{Db{c}}{Db{c}}}{{Db{c}}}Dd}{{{Df{c}}{Df{c}}}{{Df{c}}}Dd}{{{Dh{c}}{Dh{c}}}{{Dh{c}}}Dd}{{{Dj{c}}{Dj{c}}}{{Dj{c}}}Dd}{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dd}{{{Dn{c}}{Dn{c}}}{{Dn{c}}}Dd}{{{E`{c}}{E`{c}}}{{E`{c}}}Dd}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dd}{{{Db{c}}{Db{c}}}BjDd}{{{Df{c}}{Df{c}}}BjDd}{{{Dh{c}}{Dh{c}}}BjDd}{{{Dj{c}}{Dj{c}}}BjDd}{{{Dl{c}}{Dl{c}}}BjDd}{{{Dn{c}}{Dn{c}}}BjDd}{{{E`{c}}{E`{c}}}BjDd}{{{Eb{c}}{Eb{c}}}BjDd}?>=<;:9876543210?>=<;:9876543210{ce{}{}}00000000000000000000000{EjEj}{ElEl}{{{Db{c}}}{{Db{c}}}En}{{{Df{c}}}{{Df{c}}}En}{{{Dh{c}}}{{Dh{c}}}En}{{{Dj{c}}}{{Dj{c}}}En}{{{Dl{c}}}{{Dl{c}}}En}{{{Dn{c}}}{{Dn{c}}}En}{{{E`{c}}}{{E`{c}}}En}{{{Eb{c}}}{{Eb{c}}}En}{{{Ed{c}}}{{Ed{c}}}En}{{{Ef{c}}}{{Ef{c}}}En}{{EjEj}Ad}{{ElEl}Ad}{{}Ej}{{}El}{{}{{Db{c}}}{}}{{}{{Df{c}}}{}}{{}{{Dh{c}}}{}}{{}{{Dj{c}}}{}}{{}{{Dl{c}}}{}}{{}{{Dn{c}}}{}}{{}{{E`{c}}}{}}{{}{{Eb{c}}}{}}{{}{{Ed{c}}}{}}{{}{{Ef{c}}}{}}{{{Db{c}}{Db{c}}}{{Db{c}}}Dd}{{{Df{c}}{Df{c}}}{{Df{c}}}Dd}{{{Dh{c}}{Dh{c}}}{{Dh{c}}}Dd}{{{Dj{c}}{Dj{c}}}{{Dj{c}}}Dd}{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dd}{{{Dn{c}}{Dn{c}}}{{Dn{c}}}Dd}{{{E`{c}}{E`{c}}}{{E`{c}}}Dd}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dd}{{{Ed{c}}{Ed{c}}}{{Ed{c}}}Dd}{{{Ef{c}}{Ef{c}}}{{Ef{c}}}Dd}{{{Db{c}}{Db{c}}}BjDd}{{{Df{c}}{Df{c}}}BjDd}{{{Dh{c}}{Dh{c}}}BjDd}{{{Dj{c}}{Dj{c}}}BjDd}{{{Dl{c}}{Dl{c}}}BjDd}{{{Dn{c}}{Dn{c}}}BjDd}{{{E`{c}}{E`{c}}}BjDd}{{{Eb{c}}{Eb{c}}}BjDd}{{{Ed{c}}{Ed{c}}}BjDd}{{{Ef{c}}{Ef{c}}}BjDd}{{EjEj}An}{{ElEl}An}{{{Db{c}}{Eh{d}}}AnDd}{{{Db{c}}{Db{c}}}AnB`}{{{Df{c}}{Df{c}}}AnB`}{{{Df{c}}{Eh{d}}}AnDd}{{{Dh{c}}{Eh{d}}}AnDd}{{{Dh{c}}{Dh{c}}}AnB`}{{{Dj{c}}{Eh{d}}}AnDd}{{{Dj{c}}{Dj{c}}}AnB`}{{{Dl{c}}{Eh{d}}}AnDd}{{{Dl{c}}{Dl{c}}}AnB`}{{{Dn{c}}{Dn{c}}}AnB`}{{{Dn{c}}{Eh{d}}}AnDd}{{{E`{c}}{Eh{d}}}AnDd}{{{E`{c}}{E`{c}}}AnB`}{{{Eb{c}}{Eb{c}}}AnB`}{{{Eb{c}}{Eh{d}}}AnDd}{{{Ed{c}}{Eh{d}}}AnDd}{{{Ed{c}}{Ed{c}}}AnB`}{{{Ef{c}}{Eh{d}}}AnDd}{{{Ef{c}}{Ef{c}}}AnB`}{{EjBb}{{Cj{BjF`}}}}{{ElBb}{{Cj{BjF`}}}}{{{Db{c}}Bb}BdDd}00000{{{Df{c}}Bb}BdDd}00000{{{Dh{c}}Bb}BdDd}00000{{{Dj{c}}Bb}BdDd}00000{{{Dl{c}}Bb}BdDd}00000{{{Dn{c}}Bb}BdDd}00000{{{E`{c}}Bb}BdDd}00000{{{Eb{c}}Bb}BdDd}00000{{{Ed{c}}Bb}BdDd}0{{{Ef{c}}Bb}BdDd}0{cc{}}0{{{Eh{d}}}{{Db{c}}}Dd}1{Fb{{Db{c}}}Dd}2{Fd{{Df{c}}}Dd}{{{Eh{d}}}{{Df{c}}}Dd}{{{Db{c}}}{{Df{e}}}DdDd}5{Ff{{Dh{c}}}Dd}{{{Eh{d}}}{{Dh{c}}}Dd}{{{Db{c}}}{{Dh{e}}}DdDd}{{{Df{c}}}{{Dh{e}}}DdDd}{Fh{{Dj{c}}}Dd}{{{Db{c}}}{{Dj{e}}}DdDd}{{{Eh{d}}}{{Dj{c}}}Dd}{{{Df{c}}}{{Dj{e}}}DdDd}={{{Dh{c}}}{{Dj{e}}}DdDd}>{Fj{{Dl{c}}}Dd}{{{Eh{d}}}{{Dl{c}}}Dd}{{{Dl{c}}}{{Dn{e}}}DdDd}{cc{}}{Fl{{Dn{c}}}Dd}{{{Eh{d}}}{{Dn{c}}}Dd}2{{{Eh{d}}}{{E`{c}}}Dd}{{{Dn{c}}}{{E`{e}}}DdDd}{{{Dl{c}}}{{E`{e}}}DdDd}{Fn{{E`{c}}}Dd}{{{Dl{c}}}{{Eb{e}}}DdDd}{{{E`{c}}}{{Eb{e}}}DdDd}8{G`{{Eb{c}}}Dd}{{{Dn{c}}}{{Eb{e}}}DdDd}{{{Eh{d}}}{{Eb{c}}}Dd};{Gb{{Ed{c}}}Dd}{{{Eh{d}}}{{Ed{c}}}Dd}{{{Eh{d}}}{{Ef{c}}}Dd}>{{{Ed{c}}}{{Ef{e}}}DdDd}{Gd{{Ef{c}}}Dd}{{{Eh{d}}}{{Db{c}}}{}}{{{Eh{d}}}{{Df{c}}}{}}{{{Eh{d}}}{{Dh{c}}}{}}{{{Eh{d}}}{{Dj{c}}}{}}{{{Eh{d}}}{{Dl{c}}}{}}{{{Eh{d}}}{{Dn{c}}}{}}{{{Eh{d}}}{{E`{c}}}{}}{{{Eh{d}}}{{Eb{c}}}{}}{{{Eh{d}}}{{Ed{c}}}{}}{{{Eh{d}}}{{Ef{c}}}{}}{{{f{Gb}}}Bj}00{{{f{Gd}}}Bj}00{{{f{G`}}}Bj}{{{f{Fj}}}Bj}{{{f{Fl}}}Bj}{{{f{Fn}}}Bj}{{{f{Fh}}}Bj}00{{{f{Fb}}}Bj}00{{{f{Fd}}}Bj}00{{{f{Ff}}}Bj}00{{{Db{c}}}FbDd}{{{Df{c}}}FdDd}{{{Dh{c}}}FfDd}{{{Dj{c}}}FhDd}{{{Dl{c}}}FjDd}{{{Dn{c}}}FlDd}{{{E`{c}}}FnDd}{{{Eb{c}}}G`Dd}{{{Ed{c}}}GbDd}{{{Ef{c}}}GdDd}{{Ejc}BjBn}{{Elc}BjBn}{{{Db{c}}e}BjBlBn}{{{Df{c}}e}BjBlBn}{{{Dh{c}}e}BjBlBn}{{{Dj{c}}e}BjBlBn}{{{Dl{c}}e}BjBlBn}{{{Dn{c}}e}BjBlBn}{{{E`{c}}e}BjBlBn}{{{Eb{c}}e}BjBlBn}{{{Ed{c}}e}BjBlBn}{{{Ef{c}}e}BjBlBn}{ce{}{}}00000000000`{{{Db{c}}{Db{c}}}{{Db{c}}}Dd}{{{Df{c}}{Df{c}}}{{Df{c}}}Dd}{{{Dh{c}}{Dh{c}}}{{Dh{c}}}Dd}{{{Dj{c}}{Dj{c}}}{{Dj{c}}}Dd}{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dd}{{{Dn{c}}{Dn{c}}}{{Dn{c}}}Dd}{{{E`{c}}{E`{c}}}{{E`{c}}}Dd}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dd}{{{Ed{c}}{Ed{c}}}{{Ed{c}}}Dd}{{{Ef{c}}{Ef{c}}}{{Ef{c}}}Dd}{{{Db{c}}{Db{c}}}BjDd}{{{Df{c}}{Df{c}}}BjDd}{{{Dh{c}}{Dh{c}}}BjDd}{{{Dj{c}}{Dj{c}}}BjDd}{{{Dl{c}}{Dl{c}}}BjDd}{{{Dn{c}}{Dn{c}}}BjDd}{{{E`{c}}{E`{c}}}BjDd}{{{Eb{c}}{Eb{c}}}BjDd}{{{Ed{c}}{Ed{c}}}BjDd}{{{Ef{c}}{Ef{c}}}BjDd}`{{{Dl{c}}}{{Dl{c}}}Dd}{{{Dn{c}}}{{Dn{c}}}Dd}{{{E`{c}}}{{E`{c}}}Dd}{{{Eb{c}}}{{Eb{c}}}Dd}{{{Ed{c}}}{{Ed{c}}}Dd}{{{Ef{c}}}{{Ef{c}}}Dd}`{Fb{{Db{c}}}Dd}{Fd{{Df{c}}}Dd}{Ff{{Dh{c}}}Dd}{Fh{{Dj{c}}}Dd}{Fj{{Dl{c}}}Dd}{Fl{{Dn{c}}}Dd}{Fn{{E`{c}}}Dd}{G`{{Eb{c}}}Dd}{Gb{{Ed{c}}}Dd}{Gd{{Ef{c}}}Dd}{{{Db{c}}}{{Db{c}}}{}}{{{Df{c}}}{{Df{c}}}{}}{{{Dh{c}}}{{Dh{c}}}{}}{{{Dj{c}}}{{Dj{c}}}{}}{{{Dl{c}}}{{Dl{c}}}{}}{{{Dn{c}}}{{Dn{c}}}{}}{{{E`{c}}}{{E`{c}}}{}}{{{Eb{c}}}{{Eb{c}}}{}}{{EjEj}{{C`{Ad}}}}{{ElEl}{{C`{Ad}}}}{{{f{d}}}Gb}{{{f{d}}{f{Gb}}}Bj}0{{{f{d}}}Gd}{{{f{d}}{f{Gd}}}Bj}0{{{f{d}}}G`}{{{f{d}}{f{G`}}}Bj}{{{f{d}}}Fj}{{{f{d}}{f{Fj}}}Bj}{{{f{d}}}Fl}0{{{f{d}}{f{Fl}}}Bj}{{{f{d}}}Fn}0{{{f{d}}{f{Fn}}}Bj}{{{f{d}}Cb}Fn}{{{f{d}}Cb}G`}{{{f{d}}}Fh}00{{{f{d}}{f{Fh}}}Bj}00{{{f{d}}}Fb}00{{{f{d}}{f{Fb}}}Bj}00{{{f{d}}}Fd}000{{{f{d}}{f{Fd}}}Bj}00{{{f{d}}}Ff}000{{{f{d}}{f{Ff}}}Bj}00{{{f{d}}Cb}Ff}00{{{f{d}}Cb}Fh}00{{{Db{c}}{Db{c}}}{{Db{c}}}Dd}{{{Df{c}}{Df{c}}}{{Df{c}}}Dd}{{{Dh{c}}{Dh{c}}}{{Dh{c}}}Dd}{{{Dj{c}}{Dj{c}}}{{Dj{c}}}Dd}{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dd}{{{Dn{c}}{Dn{c}}}{{Dn{c}}}Dd}{{{E`{c}}{E`{c}}}{{E`{c}}}Dd}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dd}{{{Ed{c}}{Ed{c}}}{{Ed{c}}}Dd}{{{Ef{c}}{Ef{c}}}{{Ef{c}}}Dd}{{{Db{c}}{Db{c}}}BjDd}{{{Df{c}}{Df{c}}}BjDd}{{{Dh{c}}{Dh{c}}}BjDd}{{{Dj{c}}{Dj{c}}}BjDd}{{{Dl{c}}{Dl{c}}}BjDd}{{{Dn{c}}{Dn{c}}}BjDd}{{{E`{c}}{E`{c}}}BjDd}{{{Eb{c}}{Eb{c}}}BjDd}{{{Ed{c}}{Ed{c}}}BjDd}{{{Ef{c}}{Ef{c}}}BjDd}{{{Db{c}}Fb}BjDd}{{{Df{c}}Fd}BjDd}{{{Dh{c}}Ff}BjDd}{{{Dj{c}}Fh}BjDd}{{{Dl{c}}Fj}BjDd}{{{Dn{c}}Fl}BjDd}{{{E`{c}}Fn}BjDd}{{{Eb{c}}G`}BjDd}{{{Ed{c}}Gb}BjDd}{{{Ef{c}}Gd}BjDd}{{{Db{c}}{Db{c}}}{{Db{c}}}Dd}{{{Df{c}}{Df{c}}}{{Df{c}}}Dd}{{{Dh{c}}{Dh{c}}}{{Dh{c}}}Dd}{{{Dj{c}}{Dj{c}}}{{Dj{c}}}Dd}{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dd}{{{Dn{c}}{Dn{c}}}{{Dn{c}}}Dd}{{{E`{c}}{E`{c}}}{{E`{c}}}Dd}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dd}{{{Db{c}}{Db{c}}}BjDd}{{{Df{c}}{Df{c}}}BjDd}{{{Dh{c}}{Dh{c}}}BjDd}{{{Dj{c}}{Dj{c}}}BjDd}{{{Dl{c}}{Dl{c}}}BjDd}{{{Dn{c}}{Dn{c}}}BjDd}{{{E`{c}}{E`{c}}}BjDd}{{{Eb{c}}{Eb{c}}}BjDd}?>=<;:9876543210?>=<;:98{{{Ed{c}}{Ed{c}}}{{Ed{c}}}Dd}{{{Ef{c}}{Ef{c}}}{{Ef{c}}}Dd}98765432{{{Ed{c}}{Ed{c}}}BjDd}{{{Ef{c}}{Ef{c}}}BjDd}{c{{Cj{e}}}{}{}}00{Ff{{Cj{{Db{c}}Gf}}}Dd}{{{Dh{c}}}{{Cj{{Db{e}}Gf}}}DdDd}{Fd{{Cj{{Db{c}}Gf}}}Dd}{Cb{{Cj{{Db{c}}Gf}}}Dd}{{{Df{c}}}{{Cj{{Db{e}}Gf}}}DdDd}{{{Dj{c}}}{{Cj{{Db{e}}Gf}}}DdDd}{Fh{{Cj{{Db{c}}Gf}}}Dd}{{{Dj{c}}}{{Cj{{Df{e}}Gf}}}DdDd}{{{Dh{c}}}{{Cj{{Df{e}}Gf}}}DdDd}{Fh{{Cj{{Df{c}}Gf}}}Dd}{Ff{{Cj{{Df{c}}Gf}}}Dd};{Fh{{Cj{{Dh{c}}Gf}}}Dd}{{{Dj{c}}}{{Cj{{Dh{e}}Gf}}}DdDd}=={{{E`{c}}}{{Cj{{Dl{e}}Gf}}}DdDd}{Fl{{Cj{{Dl{c}}Gf}}}Dd}{Fn{{Cj{{Dl{c}}Gf}}}Dd}{G`{{Cj{{Dl{c}}Gf}}}Dd}{{{Eb{c}}}{{Cj{{Dl{e}}Gf}}}DdDd}{{{Dn{c}}}{{Cj{{Dl{e}}Gf}}}DdDd}{Gh{{Cj{{Dl{c}}Gf}}}Dd}{c{{Cj{e}}}{}{}}{{{Eb{c}}}{{Cj{{Dn{e}}Gf}}}DdDd}{Fn{{Cj{{Dn{c}}Gf}}}Dd}{{{E`{c}}}{{Cj{{Dn{e}}Gf}}}DdDd}3{G`{{Cj{{Dn{c}}Gf}}}Dd}{{{Eb{c}}}{{Cj{{E`{e}}Gf}}}DdDd}{G`{{Cj{{E`{c}}Gf}}}Dd}6666666666666666{cCl{}}00000000000{{{f{d}}Gb}Bj}{{{f{Gb}}{f{d}}}Bj}{{{f{d}}Gd}Bj}{{{f{Gd}}{f{d}}}Bj}{{{f{d}}G`}Bj}{{{f{G`}}{f{d}}}Bj}{{{f{d}}Fj}Bj}{{{f{Fj}}{f{d}}}Bj}{{{f{d}}Fl}Bj}0{{{f{Fl}}{f{d}}}Bj}{{{f{d}}Fn}Bj}0{{{f{Fn}}{f{d}}}Bj}{{{f{Gj}}{f{d}}}Bj}{{{f{d}}FnCb}Bj}{{{f{d}}G`Cb}Bj}{{{f{d}}Fh}Bj}00{{{f{Fh}}{f{d}}}Bj}00{{{f{d}}Fb}Bj}00{{{f{Fb}}{f{d}}}Bj}00{{{f{d}}Fd}Bj}000{{{f{Fd}}{f{d}}}Bj}00{{{f{d}}Ff}Bj}000{{{f{Ff}}{f{d}}}Bj}00{{{f{d}}FfCb}Bj}00{{{f{d}}FhCb}Bj}00````````````````````````````````````````","c":[551,554],"p":[[10,"AsBytes",0],[1,"u8"],[1,"slice"],[10,"ByteSliceMut",0],[10,"ByteSlice",0],[5,"Ref",0],[10,"Sized",832],[5,"Unalign",0],[10,"Copy",832],[6,"Ordering",833],[10,"FromBytes",0],[10,"Ord",833],[10,"Unaligned",0],[10,"Default",834],[1,"bool"],[10,"PartialEq",833],[5,"Formatter",835],[8,"Result",835],[10,"Display",835],[10,"Debug",835],[1,"unit"],[10,"Hash",836],[10,"Hasher",836],[6,"Option",837],[1,"usize"],[1,"tuple"],[10,"FromZeroes",0],[10,"PartialOrd",833],[6,"Result",838],[5,"TypeId",839],[17,"Output"],[10,"FnOnce",840],[5,"U16",123],[10,"ByteOrder",123],[5,"U32",123],[5,"U64",123],[5,"U128",123],[5,"I16",123],[5,"I32",123],[5,"I64",123],[5,"I128",123],[5,"F32",123],[5,"F64",123],[1,"array"],[6,"BigEndian",123],[6,"LittleEndian",123],[10,"Clone",841],[5,"Error",835],[1,"u16"],[1,"u32"],[1,"u64"],[1,"u128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i128"],[1,"f32"],[1,"f64"],[5,"TryFromIntError",842],[1,"isize"],[1,"i8"]],"b":[[24,"impl-Ord-for-Ref%3CB,+T%3E"],[25,"impl-Ord-for-Ref%3CB,+%5BT%5D%3E"],[28,"impl-Deref-for-Ref%3CB,+%5BT%5D%3E"],[29,"impl-Deref-for-Ref%3CB,+T%3E"],[31,"impl-DerefMut-for-Ref%3CB,+T%3E"],[32,"impl-DerefMut-for-Ref%3CB,+%5BT%5D%3E"],[36,"impl-PartialEq-for-Ref%3CB,+%5BT%5D%3E"],[37,"impl-PartialEq-for-Ref%3CB,+T%3E"],[39,"impl-Display-for-Ref%3CB,+T%3E"],[40,"impl-Display-for-Ref%3CB,+%5BT%5D%3E"],[41,"impl-Debug-for-Ref%3CB,+%5BT%5D%3E"],[42,"impl-Debug-for-Ref%3CB,+T%3E"],[43,"impl-Display-for-Unalign%3CT%3E"],[44,"impl-Debug-for-Unalign%3CT%3E"],[91,"impl-PartialOrd-for-Ref%3CB,+T%3E"],[92,"impl-PartialOrd-for-Ref%3CB,+%5BT%5D%3E"],[315,"impl-PartialEq%3C%5Bu8;+2%5D%3E-for-U16%3CO%3E"],[316,"impl-PartialEq-for-U16%3CO%3E"],[317,"impl-PartialEq-for-U32%3CO%3E"],[318,"impl-PartialEq%3C%5Bu8;+4%5D%3E-for-U32%3CO%3E"],[319,"impl-PartialEq%3C%5Bu8;+8%5D%3E-for-U64%3CO%3E"],[320,"impl-PartialEq-for-U64%3CO%3E"],[321,"impl-PartialEq%3C%5Bu8;+16%5D%3E-for-U128%3CO%3E"],[322,"impl-PartialEq-for-U128%3CO%3E"],[323,"impl-PartialEq%3C%5Bu8;+2%5D%3E-for-I16%3CO%3E"],[324,"impl-PartialEq-for-I16%3CO%3E"],[325,"impl-PartialEq-for-I32%3CO%3E"],[326,"impl-PartialEq%3C%5Bu8;+4%5D%3E-for-I32%3CO%3E"],[327,"impl-PartialEq%3C%5Bu8;+8%5D%3E-for-I64%3CO%3E"],[328,"impl-PartialEq-for-I64%3CO%3E"],[329,"impl-PartialEq-for-I128%3CO%3E"],[330,"impl-PartialEq%3C%5Bu8;+16%5D%3E-for-I128%3CO%3E"],[331,"impl-PartialEq%3C%5Bu8;+4%5D%3E-for-F32%3CO%3E"],[332,"impl-PartialEq-for-F32%3CO%3E"],[333,"impl-PartialEq%3C%5Bu8;+8%5D%3E-for-F64%3CO%3E"],[334,"impl-PartialEq-for-F64%3CO%3E"],[337,"impl-Display-for-U16%3CO%3E"],[338,"impl-Octal-for-U16%3CO%3E"],[339,"impl-LowerHex-for-U16%3CO%3E"],[340,"impl-UpperHex-for-U16%3CO%3E"],[341,"impl-Binary-for-U16%3CO%3E"],[342,"impl-Debug-for-U16%3CO%3E"],[343,"impl-Display-for-U32%3CO%3E"],[344,"impl-LowerHex-for-U32%3CO%3E"],[345,"impl-Binary-for-U32%3CO%3E"],[346,"impl-Octal-for-U32%3CO%3E"],[347,"impl-UpperHex-for-U32%3CO%3E"],[348,"impl-Debug-for-U32%3CO%3E"],[349,"impl-LowerHex-for-U64%3CO%3E"],[350,"impl-Octal-for-U64%3CO%3E"],[351,"impl-Debug-for-U64%3CO%3E"],[352,"impl-Binary-for-U64%3CO%3E"],[353,"impl-Display-for-U64%3CO%3E"],[354,"impl-UpperHex-for-U64%3CO%3E"],[355,"impl-Binary-for-U128%3CO%3E"],[356,"impl-Octal-for-U128%3CO%3E"],[357,"impl-LowerHex-for-U128%3CO%3E"],[358,"impl-UpperHex-for-U128%3CO%3E"],[359,"impl-Debug-for-U128%3CO%3E"],[360,"impl-Display-for-U128%3CO%3E"],[361,"impl-LowerHex-for-I16%3CO%3E"],[362,"impl-Octal-for-I16%3CO%3E"],[363,"impl-Display-for-I16%3CO%3E"],[364,"impl-Debug-for-I16%3CO%3E"],[365,"impl-Binary-for-I16%3CO%3E"],[366,"impl-UpperHex-for-I16%3CO%3E"],[367,"impl-UpperHex-for-I32%3CO%3E"],[368,"impl-Display-for-I32%3CO%3E"],[369,"impl-Debug-for-I32%3CO%3E"],[370,"impl-Octal-for-I32%3CO%3E"],[371,"impl-LowerHex-for-I32%3CO%3E"],[372,"impl-Binary-for-I32%3CO%3E"],[373,"impl-Binary-for-I64%3CO%3E"],[374,"impl-Display-for-I64%3CO%3E"],[375,"impl-UpperHex-for-I64%3CO%3E"],[376,"impl-Debug-for-I64%3CO%3E"],[377,"impl-Octal-for-I64%3CO%3E"],[378,"impl-LowerHex-for-I64%3CO%3E"],[379,"impl-UpperHex-for-I128%3CO%3E"],[380,"impl-Octal-for-I128%3CO%3E"],[381,"impl-Debug-for-I128%3CO%3E"],[382,"impl-Display-for-I128%3CO%3E"],[383,"impl-LowerHex-for-I128%3CO%3E"],[384,"impl-Binary-for-I128%3CO%3E"],[385,"impl-Display-for-F32%3CO%3E"],[386,"impl-Debug-for-F32%3CO%3E"],[387,"impl-Display-for-F64%3CO%3E"],[388,"impl-Debug-for-F64%3CO%3E"],[391,"impl-From%3C%5Bu8;+2%5D%3E-for-U16%3CO%3E"],[393,"impl-From%3Cu16%3E-for-U16%3CO%3E"],[395,"impl-From%3Cu32%3E-for-U32%3CO%3E"],[396,"impl-From%3C%5Bu8;+4%5D%3E-for-U32%3CO%3E"],[397,"impl-From%3CU16%3CO%3E%3E-for-U32%3CP%3E"],[399,"impl-From%3Cu64%3E-for-U64%3CO%3E"],[400,"impl-From%3C%5Bu8;+8%5D%3E-for-U64%3CO%3E"],[401,"impl-From%3CU16%3CO%3E%3E-for-U64%3CP%3E"],[402,"impl-From%3CU32%3CO%3E%3E-for-U64%3CP%3E"],[403,"impl-From%3Cu128%3E-for-U128%3CO%3E"],[404,"impl-From%3CU16%3CO%3E%3E-for-U128%3CP%3E"],[405,"impl-From%3C%5Bu8;+16%5D%3E-for-U128%3CO%3E"],[406,"impl-From%3CU32%3CO%3E%3E-for-U128%3CP%3E"],[408,"impl-From%3CU64%3CO%3E%3E-for-U128%3CP%3E"],[410,"impl-From%3Ci16%3E-for-I16%3CO%3E"],[411,"impl-From%3C%5Bu8;+2%5D%3E-for-I16%3CO%3E"],[412,"impl-From%3CI16%3CO%3E%3E-for-I32%3CP%3E"],[414,"impl-From%3Ci32%3E-for-I32%3CO%3E"],[415,"impl-From%3C%5Bu8;+4%5D%3E-for-I32%3CO%3E"],[417,"impl-From%3C%5Bu8;+8%5D%3E-for-I64%3CO%3E"],[418,"impl-From%3CI32%3CO%3E%3E-for-I64%3CP%3E"],[419,"impl-From%3CI16%3CO%3E%3E-for-I64%3CP%3E"],[420,"impl-From%3Ci64%3E-for-I64%3CO%3E"],[421,"impl-From%3CI16%3CO%3E%3E-for-I128%3CP%3E"],[422,"impl-From%3CI64%3CO%3E%3E-for-I128%3CP%3E"],[424,"impl-From%3Ci128%3E-for-I128%3CO%3E"],[425,"impl-From%3CI32%3CO%3E%3E-for-I128%3CP%3E"],[426,"impl-From%3C%5Bu8;+16%5D%3E-for-I128%3CO%3E"],[428,"impl-From%3Cf32%3E-for-F32%3CO%3E"],[429,"impl-From%3C%5Bu8;+4%5D%3E-for-F32%3CO%3E"],[430,"impl-From%3C%5Bu8;+8%5D%3E-for-F64%3CO%3E"],[432,"impl-From%3CF32%3CO%3E%3E-for-F64%3CP%3E"],[433,"impl-From%3Cf64%3E-for-F64%3CO%3E"],[684,"impl-TryFrom%3Cu64%3E-for-U16%3CO%3E"],[685,"impl-TryFrom%3CU64%3CP%3E%3E-for-U16%3CO%3E"],[686,"impl-TryFrom%3Cu32%3E-for-U16%3CO%3E"],[687,"impl-TryFrom%3Cusize%3E-for-U16%3CO%3E"],[688,"impl-TryFrom%3CU32%3CP%3E%3E-for-U16%3CO%3E"],[689,"impl-TryFrom%3CU128%3CP%3E%3E-for-U16%3CO%3E"],[690,"impl-TryFrom%3Cu128%3E-for-U16%3CO%3E"],[691,"impl-TryFrom%3CU128%3CP%3E%3E-for-U32%3CO%3E"],[692,"impl-TryFrom%3CU64%3CP%3E%3E-for-U32%3CO%3E"],[693,"impl-TryFrom%3Cu128%3E-for-U32%3CO%3E"],[694,"impl-TryFrom%3Cu64%3E-for-U32%3CO%3E"],[696,"impl-TryFrom%3Cu128%3E-for-U64%3CO%3E"],[697,"impl-TryFrom%3CU128%3CP%3E%3E-for-U64%3CO%3E"],[700,"impl-TryFrom%3CI64%3CP%3E%3E-for-I16%3CO%3E"],[701,"impl-TryFrom%3Ci32%3E-for-I16%3CO%3E"],[702,"impl-TryFrom%3Ci64%3E-for-I16%3CO%3E"],[703,"impl-TryFrom%3Ci128%3E-for-I16%3CO%3E"],[704,"impl-TryFrom%3CI128%3CP%3E%3E-for-I16%3CO%3E"],[705,"impl-TryFrom%3CI32%3CP%3E%3E-for-I16%3CO%3E"],[706,"impl-TryFrom%3Cisize%3E-for-I16%3CO%3E"],[708,"impl-TryFrom%3CI128%3CP%3E%3E-for-I32%3CO%3E"],[709,"impl-TryFrom%3Ci64%3E-for-I32%3CO%3E"],[710,"impl-TryFrom%3CI64%3CP%3E%3E-for-I32%3CO%3E"],[712,"impl-TryFrom%3Ci128%3E-for-I32%3CO%3E"],[713,"impl-TryFrom%3CI128%3CP%3E%3E-for-I64%3CO%3E"],[714,"impl-TryFrom%3Ci128%3E-for-I64%3CO%3E"]],"a":{"include_bytes":[51],"include_data":[51],"include_type":[51]}}],\
["zerocopy_derive",{"doc":"Derive macros for zerocopy’s traits.","t":"YYYYY","n":["AsBytes","FromBytes","FromZeroes","KnownLayout","Unaligned"],"q":[[0,"zerocopy_derive"]],"d":["","","","",""],"i":[0,0,0,0,0],"f":"`````","c":[],"p":[],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
